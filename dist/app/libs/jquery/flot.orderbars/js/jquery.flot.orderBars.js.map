{"version":3,"sources":["../../../../../../server/app/libs/jquery/flot.orderbars/js/jquery.flot.orderBars.js"],"names":["$","init","plot","orderedBarSeries","nbOfBarsToOrder","borderWidth","borderWidthInXabsWidth","pixelInXWidthEquivalent","isHorizontal","decallageByOrder","reOrderBars","serie","datapoints","shiftedPoints","serieNeedToBeReordered","checkIfGraphIsHorizontal","calculPixel2XWidthConvert","retrieveBarSeries","calculBorderAndBarWidth","position","findPosition","decallage","centerBarShift","calculCenterBarShift","bars","order","isBarAtLeftOfCenter","sumWidth","Math","floor","ceil","shiftPoints","points","show","gridDimSize","getPlaceholder","innerHeight","innerWidth","minMaxValues","getAxeMinMaxValues","getData","AxeSize","series","AxeIdx","Array","i","length","data","findOthersBarsToReOrders","retSeries","orderValuesSeen","indexOf","push","sort","sortByOrder","serie1","serie2","x","y","lineWidth","horizontal","pos","width","barWidth","start","end","totalWidth","dx","ps","pointsize","j","hooks","processDatapoints","options","plugins","name","version","jQuery"],"mappings":"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","file":"jquery.flot.orderBars.js","sourcesContent":["/*\r\n * Flot plugin to order bars side by side.\r\n *\r\n * Released under the MIT license by Benjamin BUFFET, 20-Sep-2010.\r\n * Modifications made by Steven Hall <github.com/emmerich>, 01-May-2013.\r\n *\r\n * This plugin is an alpha version.\r\n *\r\n * To activate the plugin you must specify the parameter \"order\" for the specific serie :\r\n *\r\n *  $.plot($(\"#placeholder\"), [{ data: [ ... ], bars :{ order = null or integer }])\r\n *\r\n * If 2 series have the same order param, they are ordered by the position in the array;\r\n *\r\n * The plugin adjust the point by adding a value depanding of the barwidth\r\n * Exemple for 3 series (barwidth : 0.1) :\r\n *\r\n *          first bar décalage : -0.15\r\n *          second bar décalage : -0.05\r\n *          third bar décalage : 0.05\r\n *\r\n */\r\n\r\n// INFO: decalage/decallage is French for gap. It's used to denote the spacing applied to each\r\n// bar.\r\n(function($){\r\n    function init(plot){\r\n        var orderedBarSeries;\r\n        var nbOfBarsToOrder;\r\n        var borderWidth;\r\n        var borderWidthInXabsWidth;\r\n        var pixelInXWidthEquivalent = 1;\r\n        var isHorizontal = false;\r\n\r\n        // A mapping of order integers to decallage.\r\n        var decallageByOrder = {};\r\n\r\n        /*\r\n         * This method add shift to x values\r\n         */\r\n        function reOrderBars(plot, serie, datapoints){\r\n            var shiftedPoints = null;\r\n\r\n            if(serieNeedToBeReordered(serie)){\r\n                checkIfGraphIsHorizontal(serie);\r\n                calculPixel2XWidthConvert(plot);\r\n                retrieveBarSeries(plot);\r\n                calculBorderAndBarWidth(serie);\r\n\r\n                if(nbOfBarsToOrder >= 2){\r\n                    var position = findPosition(serie);\r\n                    var decallage = 0;\r\n\r\n                    var centerBarShift = calculCenterBarShift();\r\n\r\n                    // If we haven't already calculated the decallage for this order value, do it.\r\n                    if(typeof decallageByOrder[serie.bars.order] === 'undefined') {\r\n                        if (isBarAtLeftOfCenter(position)){\r\n                            decallageByOrder[serie.bars.order] = -1*(sumWidth(orderedBarSeries,position-1,Math.floor(nbOfBarsToOrder / 2)-1)) - centerBarShift;\r\n                        }else{\r\n                            decallageByOrder[serie.bars.order] = sumWidth(orderedBarSeries,Math.ceil(nbOfBarsToOrder / 2),position-2) + centerBarShift + borderWidthInXabsWidth*2;\r\n                        }\r\n                    }\r\n\r\n                    // Lookup the decallage based on the series' order value.\r\n                    decallage = decallageByOrder[serie.bars.order];\r\n\r\n                    shiftedPoints = shiftPoints(datapoints,serie,decallage);\r\n                    datapoints.points = shiftedPoints;\r\n                }\r\n            }\r\n            return shiftedPoints;\r\n        }\r\n\r\n        function serieNeedToBeReordered(serie){\r\n            return serie.bars != null\r\n                && serie.bars.show\r\n                && serie.bars.order != null;\r\n        }\r\n\r\n        function calculPixel2XWidthConvert(plot){\r\n            var gridDimSize = isHorizontal ? plot.getPlaceholder().innerHeight() : plot.getPlaceholder().innerWidth();\r\n            var minMaxValues = isHorizontal ? getAxeMinMaxValues(plot.getData(),1) : getAxeMinMaxValues(plot.getData(),0);\r\n            var AxeSize = minMaxValues[1] - minMaxValues[0];\r\n            pixelInXWidthEquivalent = AxeSize / gridDimSize;\r\n        }\r\n\r\n        function getAxeMinMaxValues(series,AxeIdx){\r\n            var minMaxValues = new Array();\r\n            for(var i = 0; i < series.length; i++){\r\n                minMaxValues[0] = series[i].data[0][AxeIdx];\r\n                minMaxValues[1] = series[i].data[series[i].data.length - 1][AxeIdx];\r\n            }\r\n            return minMaxValues;\r\n        }\r\n\r\n        function retrieveBarSeries(plot){\r\n            orderedBarSeries = findOthersBarsToReOrders(plot.getData());\r\n            nbOfBarsToOrder = orderedBarSeries.length;\r\n        }\r\n\r\n        function findOthersBarsToReOrders(series){\r\n            var retSeries = new Array();\r\n            var orderValuesSeen = [];\r\n\r\n            for(var i = 0; i < series.length; i++){\r\n                if(series[i].bars.order != null && series[i].bars.show &&\r\n                    orderValuesSeen.indexOf(series[i].bars.order) < 0){\r\n\r\n                    orderValuesSeen.push(series[i].bars.order);\r\n                    retSeries.push(series[i]);\r\n                }\r\n            }\r\n            return retSeries.sort(sortByOrder);\r\n        }\r\n\r\n        function sortByOrder(serie1,serie2){\r\n            var x = serie1.bars.order;\r\n            var y = serie2.bars.order;\r\n            return ((x < y) ? -1 : ((x > y) ? 1 : 0));\r\n        }\r\n\r\n        function  calculBorderAndBarWidth(serie){\r\n            borderWidth = typeof serie.bars.lineWidth !== 'undefined' ? serie.bars.lineWidth  : 2;\r\n            borderWidthInXabsWidth = borderWidth * pixelInXWidthEquivalent;\r\n        }\r\n\r\n        function checkIfGraphIsHorizontal(serie){\r\n            if(serie.bars.horizontal){\r\n                isHorizontal = true;\r\n            }\r\n        }\r\n\r\n        function findPosition(serie){\r\n            var pos = 0\r\n            for (var i = 0; i < orderedBarSeries.length; ++i) {\r\n                if (serie == orderedBarSeries[i]){\r\n                    pos = i;\r\n                    break;\r\n                }\r\n            }\r\n\r\n            return pos+1;\r\n        }\r\n\r\n        function calculCenterBarShift(){\r\n            var width = 0;\r\n\r\n            if(nbOfBarsToOrder%2 != 0)\r\n                width = (orderedBarSeries[Math.ceil(nbOfBarsToOrder / 2)].bars.barWidth)/2;\r\n\r\n            return width;\r\n        }\r\n\r\n        function isBarAtLeftOfCenter(position){\r\n            return position <= Math.ceil(nbOfBarsToOrder / 2);\r\n        }\r\n\r\n        function sumWidth(series,start,end){\r\n            var totalWidth = 0;\r\n\r\n            for(var i = start; i <= end; i++){\r\n                totalWidth += series[i].bars.barWidth+borderWidthInXabsWidth*2;\r\n            }\r\n\r\n            return totalWidth;\r\n        }\r\n\r\n        function shiftPoints(datapoints,serie,dx){\r\n            var ps = datapoints.pointsize;\r\n            var points = datapoints.points;\r\n            var j = 0;\r\n            for(var i = isHorizontal ? 1 : 0;i < points.length; i += ps){\r\n                points[i] += dx;\r\n                //Adding the new x value in the serie to be abble to display the right tooltip value,\r\n                //using the index 3 to not overide the third index.\r\n                serie.data[j][3] = points[i];\r\n                j++;\r\n            }\r\n\r\n            return points;\r\n        }\r\n\r\n        plot.hooks.processDatapoints.push(reOrderBars);\r\n\r\n    }\r\n\r\n    var options = {\r\n        series : {\r\n            bars: {order: null} // or number/string\r\n        }\r\n    };\r\n\r\n    $.plot.plugins.push({\r\n        init: init,\r\n        options: options,\r\n        name: \"orderBars\",\r\n        version: \"0.2\"\r\n    });\r\n\r\n})(jQuery);"]}