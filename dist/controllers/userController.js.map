{"version":3,"sources":["../../server/controllers/userController.js"],"names":["userController","post","req","res","body","firstName","lastName","username","email","password","permissions","groupCode","school","city","User","findOne","err","user","json","error","length","Group","code","then","_groups","group","_id","save","status","success","userId","newUser","catch","message","login","verifyPassword","valid","token","sign","id","expiresIn","getGroups","groupId","findById","updateInfo","myUser","query","changed","findByIdAndUpdate","$set","changePassword","newPassword","addGroup","findOneAndUpdate","$push","getNotifications","notifications","removeNotification","filter","notif","notificationsCopy","suc—Åess","getUser","populate","path","model","learnWords","amount","$inc","wordsLearnt","recoverPassword","uri","encodeURI","recoverToken","transporter","createTransport","service","secure","port","auth","pass","tls","rejectUnauthorized","HelperOptions","from","to","subject","text","sendMail","info","console","log","checkToken"],"mappings":"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","file":"userController.js","sourcesContent":["import { verifyPassword, encryptPassword } from 'mongoose-bcrypt';\nimport jwt from 'jsonwebtoken';\nimport secret from './../secret';\nimport helper from './helperFunctions';\nimport nodemailer from 'nodemailer';\n\nimport db from './../models';\n\nconst userController = {};\n\nuserController.post = (req, res) => {\n    const {\n        firstName,\n        lastName,\n        username,\n        email,\n        password,\n        permissions,\n        groupCode,\n        school,\n        city\n    } = req.body;\n\n    db.User.findOne({username}, (err, user) => {\n        if (err)\n            throw err;\n        else if (user)\n            return res.json({error: '–î–∞–Ω–Ω—ã–π –ª–æ–≥–∏–Ω —É–∂–µ –∑–∞–Ω—è—Ç'});\n        else {\n            db.User.findOne({email}, (err, user) => {\n                if (err)\n                    throw err;\n                else if (user)\n                    res.json({error: '–î–∞–Ω–Ω–∞—è —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω–∞—è –ø–æ—á—Ç–∞ —É–∂–µ –∑–∞–Ω—è—Ç–∞'});\n                else {\n                    if (!!groupCode.length) {\n                        db.Group.findOne({code: groupCode}).then(group => {\n                            const user = new db.User({\n                                firstName,\n                                lastName,\n                                username,\n                                email,\n                                password,\n                                permissions,\n                                _groups: [group._id],\n                                school,\n                                city\n                            });\n                            user.save().then(newUser => {\n                                res.status(200).json({\n                                    success: true,\n                                    userId: newUser._id\n                                });\n                            }).catch(err => {\n                                res.status(500).json({\n                                    message: err\n                                });\n                            });\n                        });\n                    } else {\n                        const user = new db.User({\n                            firstName,\n                            lastName,\n                            username,\n                            email,\n                            password,\n                            permissions,\n                            _groups: [],\n                            school,\n                            city\n                        });\n                        user.save().then(newUser => {\n                            // console.log('Success:\\n', newUser);\n                            res.status(200).json({\n                                success: true,\n                                userId: newUser._id\n                            });\n                        }).catch(err => {\n                            res.status(500).json({\n                                message: err\n                            });\n                        });\n                    }\n                }\n            });\n        }\n    });\n};\n\nuserController.login = (req, res) => {\n    const {username, password} = req.body;\n\n    db.User.findOne({username}).then(user => {\n        user.verifyPassword(password).then(valid => {\n            if (valid) {\n                const token = jwt.sign(\n                    {\n                        // username: user.username,\n                        // name: user.name,\n                        // notifications: user.notifications,\n                        id: user._id,\n                        permissions: user.permissions\n                        // groups: user._groups,\n                        // school: user.school\n                    },\n                    secret,\n                    {expiresIn: '2 days'}\n                );\n                res.status(200).json({\n                    success: valid,\n                    token\n                });\n            } else {\n                res.status(200).json({\n                    success: valid\n                });\n            }\n        }).catch(err => {\n            res.status(500).json({\n                message: err\n            });\n        });\n    }).catch((err) => {\n        res.status(500).json({\n            message: err\n        });\n    });\n};\n\nuserController.getGroups = (req, res) => {\n    const user = req.user;\n    const groupId = req.body.groupId;\n    if (user.permissions == 'student' || user.permissions == 'teacher') {\n        db.Group.findById(groupId).then(group => {\n            res.json({\n                group\n            });\n        }).catch(err => {\n            res.status(500).json({\n                message: err\n            });\n        });\n    }\n};\n\nuserController.updateInfo = (req, res) => {\n    const myUser = req.user;\n    const {\n      firstName,\n      lastName,\n      username\n    } = req.body;\n\n    const query = {};\n\n    if(firstName)\n      query.firstName = firstName;\n    if(lastName)\n      query.lastName = lastName;\n    if(username)\n      query.username = username;\n    else if (!firstName && !lastName) {\n        return res.json({\n            changed: false\n        });\n    }\n\n    if(query.username) {\n        db.User.findOne({ username: query.username }).then(user => {\n          if(user)\n            return res.json({error: '–î–∞–Ω–Ω—ã–π –ª–æ–≥–∏–Ω —É–∂–µ –∑–∞–Ω—è—Ç'});\n          else {\n            db.User.findByIdAndUpdate(myUser.id, {\n                $set: query\n            }).then(user => {\n                return res.json({\n                    success: true\n                });\n            }).catch(err => {\n                return res.status(500).json({\n                    message: err\n                });\n            });\n          }\n        })\n    } else {\n      db.User.findByIdAndUpdate(myUser.id, {\n          $set: query\n      }).then(user => {\n          return res.json({\n              success: true\n          });\n      }).catch(err => {\n          return res.status(500).json({\n              message: err\n          });\n      });\n    }\n};\n\nuserController.verifyPassword = (req, res) => {\n    const user = req.user;\n    const password = req.body.password;\n    db.User.findById(user.id).then(myUser => {\n        myUser.verifyPassword(password).then(valid => {\n            return res.json({ success: valid });\n        }).catch(err => {\n            res.status(500).json({\n                message: err\n            });\n        });\n    }).catch(err => {\n        res.status(500).json({\n            message: err\n        });\n    });\n};\n\nuserController.changePassword = (req, res) => {\n    const user = req.user;\n    const newPassword = req.body.newPassword;\n\n    db.User.findByIdAndUpdate(user.id, {$set: {password: newPassword}})\n        .then(myUser => {\n            return res.json({success: true});\n        }).catch((err) => {\n          return res.status(500).json({\n            message: err\n        });\n    });\n};\n\nuserController.addGroup = (req, res) => {\n    const groupCode = req.body.groupCode;\n    const user = req.user;\n\n    db.Group.findOneAndUpdate({ code: groupCode },\n    { $push: {'_students': user.id} }).then(group => {\n        db.User.findByIdAndUpdate(\n            user.id,\n            { $push: {'_groups': group._id }}).then(myUser => {\n            res.json({ success: true });\n        }).catch(err => {\n            res.status(500).json({\n                body: err\n            });\n        });\n    }).catch(err => {\n      res.status(500).json({\n           body: err\n      });\n    });\n};\n\n\nuserController.getNotifications = (req, res) => {\n    const user = req.user;\n\n    db.User.findById(user.id).then(myUser => {\n        res.json({ notifications: myUser.notifications });\n    }).catch((err) => {\n        res.status(500).json({\n            message: err\n        });\n    });\n};\n\nuserController.removeNotification = (req, res) => {\n    const user = req.user;\n    const id = req.body.id;\n\n    db.User.findById(user.id).then(myUser => {\n        myUser.notifications = myUser.notifications.filter(notif => notif.id != id);\n        let notificationsCopy = myUser.notifications;\n        myUser.save();\n        res.json({ suc—Åess: true, notifications: notificationsCopy });\n    }).catch((err) => {\n        res.status(500).json({\n            message: err\n        });\n    });\n};\n\nuserController.getUser = (req, res) => {\n    const user = req.user;\n\n    db.User.findById(user.id)\n        .populate({\n            path: '_groups',\n            model: 'Group',\n            populate: {\n                path: '_tests',\n                model: 'Stack'\n            }\n        })\n        .then(user => {\n          return res.json({ user })\n        });\n};\n\nuserController.learnWords = (req, res) => {\n  const user = req.user;\n  const amount = req.body.amount;\n\n  db.User.findByIdAndUpdate(user.id, { $inc: { wordsLearnt: amount } }).then(success => {\n    return res.json({ success: true });\n  })\n};\n\nuserController.recoverPassword = (req, res) => {\n  const email = req.body.email;\n\n  db.User.findOne({ email }).then(user => {\n    if(!user) {\n      return res.json({ success: false })\n    }\n    const token = jwt.sign(\n      {\n        id: user._id,\n        email\n      },\n      secret\n    );\n    let uri = encodeURI(token);\n    user.recoverToken = token;\n    user.save().then(res => {\n      let transporter = nodemailer.createTransport({\n        service: 'gmail',\n        secure: false,\n        port: 25,\n        auth: {\n          user: 'easylexlab@gmail.com',\n          pass: '45aCRawa@hut'\n        },\n        tls: {\n          rejectUnauthorized: false\n        }\n      });\n      let HelperOptions = {\n        from: '\"EasyLexLab\" <easylexlab@gmail.com>',\n        to: user.email,\n        // to: 'easylexlab@gmail.com',\n        subject: '–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–∞—Ä–æ–ª—è',\n        text: `–ß—Ç–æ–±—ã –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø–∞—Ä–æ–ª—å, –ø–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —ç—Ç–æ–π —Å—Å—ã–ª–∫–µ: easylexlab.ru/recover/${token}`\n      };\n      transporter.sendMail(HelperOptions, (error, info) => {\n        if(error) {\n          console.log(error);\n        } else {\n          return res.json({ success: true })\n        }\n      });\n    });\n  })\n};\n\nuserController.checkToken = (req, res) => {\n  const token = req.body.token;\n  db.User.findOne({ recoverToken: token }).then(user => {\n    if(user) {\n      user.recoverToken = '';\n      user.save().then(rr => {\n        return res.json({ success: true });\n      });\n    }\n    return res.json({ success: false });\n  });\n};\n\nexport default userController;\n"]}