{"version":3,"sources":["../../server/controllers/userController.js"],"names":["userController","post","req","res","body","name","username","email","password","permissions","groupCode","school","User","findOne","err","user","json","error","length","Group","code","then","_groups","group","_id","save","console","log","newUser","status","success","userId","catch","message","login","verifyPassword","valid","token","sign","id","expiresIn","getGroups","groupId","findById","updateInfo","myUser","query","changed","findByIdAndUpdate","$set","changePassword","newPassword","addGroup","_students","push","$push","addResult","result","stackName","results","_results","getNotifications","notifsToSend","notifications","notification","seen","readNotifs","getUser","populate","path","model"],"mappings":";;;;;;AAAA;;;;AACA;;;;AACA;;;;AACA;;;;AAEA;;;;;;AAEA,IAAMA,iBAAiB,EAAvB;;AAEAA,eAAeC,IAAf,GAAsB,UAACC,GAAD,EAAMC,GAAN,EAAc;AAAA,kBAS9BD,IAAIE,IAT0B;AAAA,MAEhCC,IAFgC,aAEhCA,IAFgC;AAAA,MAGhCC,QAHgC,aAGhCA,QAHgC;AAAA,MAIhCC,KAJgC,aAIhCA,KAJgC;AAAA,MAKhCC,QALgC,aAKhCA,QALgC;AAAA,MAMhCC,WANgC,aAMhCA,WANgC;AAAA,MAOhCC,SAPgC,aAOhCA,SAPgC;AAAA,MAQhCC,MARgC,aAQhCA,MARgC;;;AAWlC,mBAAGC,IAAH,CAAQC,OAAR,CAAgB,EAAEP,kBAAF,EAAhB,EAA8B,UAACQ,GAAD,EAAMC,IAAN,EAAe;AAC3C,QAAGD,GAAH,EACE,MAAMA,GAAN,CADF,KAEK,IAAGC,IAAH,EACHZ,IAAIa,IAAJ,CAAS,EAAEC,OAAO,uBAAT,EAAT,EADG,KAEA;AACH,uBAAGL,IAAH,CAAQC,OAAR,CAAgB,EAACN,YAAD,EAAhB,EAAyB,UAACO,GAAD,EAAMC,IAAN,EAAe;AACtC,YAAGD,GAAH,EACE,MAAMA,GAAN,CADF,KAEK,IAAGC,IAAH,EACHZ,IAAIa,IAAJ,CAAS,EAACC,OAAO,qCAAR,EAAT,EADG,KAEA;AACH,cAAG,CAAC,CAACP,UAAUQ,MAAf,EAAuB;AACrB,6BAAGC,KAAH,CAASN,OAAT,CAAiB,EAACO,MAAMV,SAAP,EAAjB,EAAoCW,IAApC,CAAyC,iBAAS;AAChD,kBAAMN,OAAO,IAAI,iBAAGH,IAAP,CAAY;AACvBP,0BADuB;AAEvBC,kCAFuB;AAGvBC,4BAHuB;AAIvBC,kCAJuB;AAKvBC,wCALuB;AAMvBa,yBAAS,CAACC,MAAMC,GAAP,CANc;AAOvBb;AAPuB,eAAZ,CAAb;AASAI,mBAAKU,IAAL,GAAYJ,IAAZ,CAAiB,mBAAW;AAC1BK,wBAAQC,GAAR,CAAY,YAAZ,EAA0BC,OAA1B;AACAzB,oBAAI0B,MAAJ,CAAW,GAAX,EAAgBb,IAAhB,CAAqB;AACnBc,2BAAS,IADU;AAEnBC,0BAAQH,QAAQJ;AAFG,iBAArB;AAID,eAND,EAMGQ,KANH,CAMS,eAAO;AACdN,wBAAQC,GAAR,CAAY,UAAZ,EAAwBb,GAAxB;AACAX,oBAAI0B,MAAJ,CAAW,GAAX,EAAgBb,IAAhB,CAAqB;AACnBiB,2BAASnB;AADU,iBAArB;AAGD,eAXD;AAYD,aAtBD;AAuBD,WAxBD,MAwBO;AACL,gBAAMC,QAAO,IAAI,iBAAGH,IAAP,CAAY;AACvBP,wBADuB;AAEvBC,gCAFuB;AAGvBC,0BAHuB;AAIvBC,gCAJuB;AAKvBC,sCALuB;AAMvBa,uBAAS,EANc;AAOvBX;AAPuB,aAAZ,CAAb;AASAI,kBAAKU,IAAL,GAAYJ,IAAZ,CAAiB,mBAAW;AAC1BK,sBAAQC,GAAR,CAAY,YAAZ,EAA0BC,OAA1B;AACAzB,kBAAI0B,MAAJ,CAAW,GAAX,EAAgBb,IAAhB,CAAqB;AACnBc,yBAAS,IADU;AAEnBC,wBAAQH,QAAQJ;AAFG,eAArB;AAID,aAND,EAMGQ,KANH,CAMS,eAAO;AACdN,sBAAQC,GAAR,CAAY,UAAZ,EAAwBb,GAAxB;AACAX,kBAAI0B,MAAJ,CAAW,GAAX,EAAgBb,IAAhB,CAAqB;AACnBiB,yBAASnB;AADU,eAArB;AAGD,aAXD;AAYD;AACF;AACF,OAtDD;AAuDD;AACF,GA9DD;AA+DD,CA1ED;;AA4EAd,eAAekC,KAAf,GAAuB,UAAChC,GAAD,EAAMC,GAAN,EAAc;AAAA,mBACJD,IAAIE,IADA;AAAA,MAC3BE,QAD2B,cAC3BA,QAD2B;AAAA,MACjBE,QADiB,cACjBA,QADiB;;;AAGnC,mBAAGI,IAAH,CAAQC,OAAR,CAAgB,EAAEP,kBAAF,EAAhB,EAA8Be,IAA9B,CAAmC,gBAAQ;AACzCN,SAAKoB,cAAL,CAAoB3B,QAApB,EAA8Ba,IAA9B,CAAmC,iBAAS;AAC1C,UAAGe,KAAH,EAAU;AACR,YAAMC,QAAQ,uBAAIC,IAAJ,CACZ;AACE;AACA;AACA;AACAC,cAAIxB,KAAKS,GAJX;AAKEf,uBAAaM,KAAKN;AAClB;AACA;AAPF,SADY,oBAWZ,EAAE+B,WAAW,QAAb,EAXY,CAAd;AAaFrC,YAAI0B,MAAJ,CAAW,GAAX,EAAgBb,IAAhB,CAAqB;AACnBc,mBAASM,KADU;AAEnBC;AAFmB,SAArB;AAIC,OAlBD,MAkBO;AACLX,gBAAQC,GAAR,CAAY,iBAAZ;AACAxB,YAAI0B,MAAJ,CAAW,GAAX,EAAgBb,IAAhB,CAAqB;AACnBc,mBAASM;AADU,SAArB;AAGD;AACF,KAzBD,EAyBGJ,KAzBH,CAyBS,eAAO;AACdN,cAAQC,GAAR,CAAY,OAAZ;AACAxB,UAAI0B,MAAJ,CAAW,GAAX,EAAgBb,IAAhB,CAAqB;AACnBiB,iBAASnB;AADU,OAArB;AAGD,KA9BD;AA+BD,GAhCD,EAgCGkB,KAhCH,CAgCS,UAAClB,GAAD,EAAS;AAChBX,QAAI0B,MAAJ,CAAW,GAAX,EAAgBb,IAAhB,CAAqB;AACnBiB,eAASnB;AADU,KAArB;AAGD,GApCD;AAqCD,CAxCD;;AA0CAd,eAAeyC,SAAf,GAA2B,UAACvC,GAAD,EAAMC,GAAN,EAAc;AACvC,MAAMY,OAAOb,IAAIa,IAAjB;AACA,MAAM2B,UAAUxC,IAAIE,IAAJ,CAASsC,OAAzB;AACA,MAAG3B,KAAKN,WAAL,IAAoB,SAApB,IAAiCM,KAAKN,WAAL,IAAoB,SAAxD,EAAmE;AACjE,qBAAGU,KAAH,CAASwB,QAAT,CAAkBD,OAAlB,EAA2BrB,IAA3B,CAAgC,iBAAS;AACvClB,UAAIa,IAAJ,CAAS;AACPO;AADO,OAAT;AAGD,KAJD;AAKD;AACF,CAVD;;AAYAvB,eAAe4C,UAAf,GAA4B,UAAC1C,GAAD,EAAMC,GAAN,EAAc;AACxC,MAAM0C,SAAS3C,IAAIa,IAAnB;AADwC,mBAKpCb,IAAIE,IALgC;AAAA,MAGtCC,IAHsC,cAGtCA,IAHsC;AAAA,MAItCC,QAJsC,cAItCA,QAJsC;;;AAOxC,MAAMwC,QAAQ,EAAd;;AAEA,MAAGzC,IAAH,EACEyC,MAAMzC,IAAN,GAAaA,IAAb;AACF,MAAGC,QAAH,EACEwC,MAAMxC,QAAN,GAAiBA,QAAjB,CADF,KAEK,IAAG,CAACD,IAAD,IAAS,CAACC,QAAb,EAAuB;AAC1B,WAAOH,IAAIa,IAAJ,CAAS;AACd+B,eAAS;AADK,KAAT,CAAP;AAGD;;AAED,mBAAGnC,IAAH,CAAQoC,iBAAR,CAA0BH,OAAON,EAAjC,EAAqC;AACnCU,UAAMH;AAD6B,GAArC,EAEGzB,IAFH,CAEQ,gBAAQ;AACd,WAAOlB,IAAIa,IAAJ,CAAS;AACdc,eAAS,IADK;AAEdf;AAFc,KAAT,CAAP;AAID,GAPD;AAQD,CA3BD;;AA6BAf,eAAemC,cAAf,GAAgC,UAACjC,GAAD,EAAMC,GAAN,EAAc;AAC5C,MAAMY,OAAOb,IAAIa,IAAjB;AACA,MAAMP,WAAWN,IAAIE,IAAJ,CAASI,QAA1B;AACA,mBAAGI,IAAH,CAAQ+B,QAAR,CAAiB5B,KAAKwB,EAAtB,EAA0BlB,IAA1B,CAA+B,kBAAU;AACvCwB,WAAOV,cAAP,CAAsB3B,QAAtB,EAAgCa,IAAhC,CAAqC,iBAAS;AAC5C,aAAOlB,IAAIa,IAAJ,CAAS,EAAEc,SAASM,KAAX,EAAT,CAAP;AACD,KAFD;AAGD,GAJD;AAKD,CARD;;AAUApC,eAAekD,cAAf,GAAgC,UAAChD,GAAD,EAAMC,GAAN,EAAc;AAC5C,MAAMY,OAAOb,IAAIa,IAAjB;AACA,MAAMoC,cAAcjD,IAAIE,IAAJ,CAAS+C,WAA7B;;AAEA,mBAAGvC,IAAH,CAAQoC,iBAAR,CAA0BjC,KAAKwB,EAA/B,EAAmC,EAAEU,MAAM,EAAEzC,UAAU2C,WAAZ,EAAR,EAAnC,EACG9B,IADH,CACQ,kBAAU;AACd,WAAOlB,IAAIa,IAAJ,CAAS,EAAEc,SAAS,IAAX,EAAT,CAAP;AACD,GAHH;AAID,CARD;;AAUA9B,eAAeoD,QAAf,GAA0B,UAAClD,GAAD,EAAMC,GAAN,EAAc;AACtC,MAAMO,YAAYR,IAAIE,IAAJ,CAASM,SAA3B;AACA,MAAMK,OAAOb,IAAIa,IAAjB;;AAEAW,UAAQC,GAAR,CAAYjB,SAAZ;;AAEA,mBAAGS,KAAH,CAASN,OAAT,CAAiB,EAAEO,MAAMV,SAAR,EAAjB,EAAsCW,IAAtC,CAA2C,iBAAS;AAClDE,UAAM8B,SAAN,CAAgBC,IAAhB,CAAqBvC,KAAKwB,EAA1B;AACAhB,UAAME,IAAN;AACA,qBAAGb,IAAH,CAAQoC,iBAAR,CACEjC,KAAKwB,EADP,EAEE,EAAEgB,OAAO,EAAE,WAAWhC,MAAMC,GAAnB,EAAT,EAFF,EAEsCH,IAFtC,CAE2C,kBAAU;AACnDlB,UAAIa,IAAJ,CAAS,EAAEc,SAAS,IAAX,EAAT;AACD,KAJD;AAKD,GARD;AASD,CAfD;;AAiBA9B,eAAewD,SAAf,GAA2B,UAACtD,GAAD,EAAMC,GAAN,EAAc;AAAA,mBAInCD,IAAIE,IAJ+B;AAAA,MAErCqD,MAFqC,cAErCA,MAFqC;AAAA,MAGrCC,SAHqC,cAGrCA,SAHqC;;;AAMvC,MAAM3C,OAAOb,IAAIa,IAAjB;;AAEA,MAAM4C,UAAU;AACdD,wBADc;AAEdD;AAFc,GAAhB;;AAKA,mBAAG7C,IAAH,CAAQ+B,QAAR,CAAiB5B,KAAKwB,EAAtB,EAA0BlB,IAA1B,CAA+B,gBAAQ;AACrCN,SAAK6C,QAAL,CAAcN,IAAd,CAAmBK,OAAnB;AACA5C,SAAKU,IAAL;AACAtB,QAAIa,IAAJ,CAAS;AACPc,eAAS;AADF,KAAT;AAGD,GAND,EAMGE,KANH,CAMS,eAAO;AACd,UAAMlB,GAAN;AACD,GARD;AAUD,CAvBD;;AAyBAd,eAAe6D,gBAAf,GAAkC,UAAC3D,GAAD,EAAMC,GAAN,EAAc;AAC9C,MAAMY,OAAOb,IAAIa,IAAjB;;AAEA,mBAAGH,IAAH,CAAQ+B,QAAR,CAAiB5B,KAAKwB,EAAtB,EAA0BlB,IAA1B,CAA+B,gBAAQ;AACrC,QAAIyC,eAAe,EAAnB;AADqC;AAAA;AAAA;;AAAA;AAErC,2BAAwB/C,KAAKgD,aAA7B,8HAA4C;AAAA,YAApCC,YAAoC;;AAC1C,YAAG,CAACA,aAAaC,IAAjB,EACEH,aAAaR,IAAb,CAAkBU,YAAlB;AACH;AALoC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAMrC7D,QAAIa,IAAJ,CAAS,EAAE+C,eAAeD,YAAjB,EAAT;AACD,GAPD;AAQD,CAXD;;AAaA9D,eAAekE,UAAf,GAA4B,UAAChE,GAAD,EAAMC,GAAN,EAAc;AACxC,MAAMY,OAAOb,IAAIa,IAAjB;;AAEA,mBAAGH,IAAH,CAAQ+B,QAAR,CAAiB5B,KAAKwB,EAAtB,EAA0BlB,IAA1B,CAA+B,gBAAQ;AAAA;AAAA;AAAA;;AAAA;AACrC,4BAAwBN,KAAKgD,aAA7B,mIAA4C;AAAA,YAApCC,YAAoC;;AAC1CA,qBAAaC,IAAb,GAAoB,IAApB;AACD;AAHoC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;AAIrClD,SAAKU,IAAL;AACAtB,QAAIa,IAAJ,CAAS,EAAEc,SAAS,IAAX,EAAT;AACD,GAND;AAOD,CAVD;;AAYA9B,eAAemE,OAAf,GAAyB,UAACjE,GAAD,EAAMC,GAAN,EAAc;AACrC,MAAMY,OAAOb,IAAIa,IAAjB;;AAEA,mBAAGH,IAAH,CAAQ+B,QAAR,CAAiB5B,KAAKwB,EAAtB,EACQ6B,QADR,CACiB;AACRC,UAAM,SADE;AAERC,WAAO,OAFC;AAGRF,cAAU;AACRC,YAAM,QADE;AAERC,aAAO;AAFC;AAHF,GADjB,EASQjD,IATR,CASa,gBAAQ;AACZ,WAAOlB,IAAIa,IAAJ,CAAS,EAAED,UAAF,EAAT,CAAP;AACR,GAXD;AAaD,CAhBD;;kBAkBef,c","file":"userController.js","sourcesContent":["import verifyPassword from 'mongoose-bcrypt';\nimport jwt from 'jsonwebtoken';\nimport secret from './../secret';\nimport helper from './helperFunctions';\n\nimport db from './../models';\n\nconst userController = {};\n\nuserController.post = (req, res) => {\n  const {\n    name,\n    username,\n    email,\n    password,\n    permissions,\n    groupCode,\n    school\n  } = req.body;\n\n  db.User.findOne({ username }, (err, user) => {\n    if(err)\n      throw err;\n    else if(user)\n      res.json({ error: 'Даный логин уже занят' });\n    else {\n      db.User.findOne({email}, (err, user) => {\n        if(err)\n          throw err;\n        else if(user)\n          res.json({error: 'Данная электронная почта уже занята'});\n        else {\n          if(!!groupCode.length) {\n            db.Group.findOne({code: groupCode}).then(group => {\n              const user = new db.User({\n                name,\n                username,\n                email,\n                password,\n                permissions,\n                _groups: [group._id],\n                school\n              });\n              user.save().then(newUser => {\n                console.log('Success:\\n', newUser);\n                res.status(200).json({\n                  success: true,\n                  userId: newUser._id\n                });\n              }).catch(err => {\n                console.log('Error:\\n', err)\n                res.status(500).json({\n                  message: err\n                });\n              });\n            });\n          } else {\n            const user = new db.User({\n              name,\n              username,\n              email,\n              password,\n              permissions,\n              _groups: [],\n              school\n            });\n            user.save().then(newUser => {\n              console.log('Success:\\n', newUser);\n              res.status(200).json({\n                success: true,\n                userId: newUser._id\n              });\n            }).catch(err => {\n              console.log('Error:\\n', err)\n              res.status(500).json({\n                message: err\n              });\n            });\n          }\n        }\n      });\n    }\n  });\n};\n\nuserController.login = (req, res) => {\n  const { username, password } = req.body;\n\n  db.User.findOne({ username }).then(user => {\n    user.verifyPassword(password).then(valid => {\n      if(valid) {\n        const token = jwt.sign(\n          {\n            // username: user.username,\n            // name: user.name,\n            // notifications: user.notifications,\n            id: user._id,\n            permissions: user.permissions\n            // groups: user._groups,\n            // school: user.school\n          },\n          secret,\n          { expiresIn: '2 days' }\n      );\n      res.status(200).json({\n        success: valid,\n        token\n      });\n      } else {\n        console.log('Invalid promise');\n        res.status(200).json({\n          success: valid\n        });\n      }\n    }).catch(err => {\n      console.log('Error');\n      res.status(500).json({\n        message: err\n      });\n    });\n  }).catch((err) => {\n    res.status(500).json({\n      message: err\n    });\n  });\n};\n\nuserController.getGroups = (req, res) => {\n  const user = req.user;\n  const groupId = req.body.groupId;\n  if(user.permissions == 'student' || user.permissions == 'teacher') {\n    db.Group.findById(groupId).then(group => {\n      res.json({\n        group\n      });\n    });\n  }\n};\n\nuserController.updateInfo = (req, res) => {\n  const myUser = req.user;\n  const {\n    name,\n    username\n  } = req.body;\n\n  const query = {};\n\n  if(name)\n    query.name = name;\n  if(username)\n    query.username = username;\n  else if(!name && !username) {\n    return res.json({\n      changed: false\n    });\n  }\n\n  db.User.findByIdAndUpdate(myUser.id, {\n    $set: query\n  }).then(user => {\n    return res.json({\n      success: true,\n      user\n    });\n  });\n};\n\nuserController.verifyPassword = (req, res) => {\n  const user = req.user;\n  const password = req.body.password;\n  db.User.findById(user.id).then(myUser => {\n    myUser.verifyPassword(password).then(valid => {\n      return res.json({ success: valid });\n    });\n  });\n};\n\nuserController.changePassword = (req, res) => {\n  const user = req.user;\n  const newPassword = req.body.newPassword;\n\n  db.User.findByIdAndUpdate(user.id, { $set: { password: newPassword }})\n    .then(myUser => {\n      return res.json({ success: true });\n    });\n};\n\nuserController.addGroup = (req, res) => {\n  const groupCode = req.body.groupCode;\n  const user = req.user;\n\n  console.log(groupCode);\n\n  db.Group.findOne({ code: groupCode }).then(group => {\n    group._students.push(user.id);\n    group.save();\n    db.User.findByIdAndUpdate(\n      user.id,\n      { $push: { '_groups': group._id }}).then(myUser => {\n      res.json({ success: true });\n    });\n  });\n};\n\nuserController.addResult = (req, res) => {\n  const {\n    result,\n    stackName\n  } = req.body;\n\n  const user = req.user;\n\n  const results = {\n    stackName,\n    result\n  };\n\n  db.User.findById(user.id).then(user => {\n    user._results.push(results);\n    user.save();\n    res.json({\n      success: true\n    });\n  }).catch(err => {\n    throw err;\n  });\n\n};\n\nuserController.getNotifications = (req, res) => {\n  const user = req.user;\n\n  db.User.findById(user.id).then(user => {\n    var notifsToSend = [];\n    for(let notification of user.notifications) {\n      if(!notification.seen)\n        notifsToSend.push(notification);\n    }\n    res.json({ notifications: notifsToSend });\n  });\n};\n\nuserController.readNotifs = (req, res) => {\n  const user = req.user;\n\n  db.User.findById(user.id).then(user => {\n    for(let notification of user.notifications) {\n      notification.seen = true;\n    }\n    user.save();\n    res.json({ success: true });\n  });\n};\n\nuserController.getUser = (req, res) => {\n  const user = req.user;\n\n  db.User.findById(user.id)\n         .populate({\n           path: '_groups',\n           model: 'Group',\n           populate: {\n             path: '_tests',\n             model: 'Stack'\n           }\n         })\n         .then(user => {\n           return res.json({ user })\n  });\n\n}\n\nexport default userController;\n"]}