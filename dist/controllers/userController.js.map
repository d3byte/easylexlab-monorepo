{"version":3,"sources":["../../server/controllers/userController.js"],"names":["userController","post","req","res","body","name","username","email","password","permissions","groupCode","school","User","findOne","err","user","json","error","length","Group","code","then","_groups","group","_id","save","status","success","userId","newUser","catch","console","log","message","login","verifyPassword","valid","token","sign","id","expiresIn","getGroups","groupId","findById","updateInfo","myUser","firstName","lastName","query","changed","findByIdAndUpdate","$set","changePassword","newPassword","addGroup","findOneAndUpdate","$push","addResult","result","stackName","results","_results","push","getNotifications","notifications","readNotifs","notification","seen","sucess","getUser","populate","path","model"],"mappings":"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","file":"userController.js","sourcesContent":["import verifyPassword from 'mongoose-bcrypt';\nimport jwt from 'jsonwebtoken';\nimport secret from './../secret';\nimport helper from './helperFunctions';\n\nimport db from './../models';\n\nconst userController = {};\n\nuserController.post = (req, res) => {\n    const {\n        name,\n        username,\n        email,\n        password,\n        permissions,\n        groupCode,\n        school\n    } = req.body;\n\n    db.User.findOne({username}, (err, user) => {\n        if (err)\n            throw err;\n        else if (user)\n            res.json({error: 'Данный логин уже занят'});\n        else {\n            db.User.findOne({email}, (err, user) => {\n                if (err)\n                    throw err;\n                else if (user)\n                    res.json({error: 'Данная электронная почта уже занята'});\n                else {\n                    if (!!groupCode.length) {\n                        db.Group.findOne({code: groupCode}).then(group => {\n                            const user = new db.User({\n                                name,\n                                username,\n                                email,\n                                password,\n                                permissions,\n                                _groups: [group._id],\n                                school\n                            });\n                            user.save().then(newUser => {\n                                // console.log('Success:\\n', newUser);\n                                res.status(200).json({\n                                    success: true,\n                                    userId: newUser._id\n                                });\n                            }).catch(err => {\n                                console.log('Error:\\n', err);\n                                res.status(500).json({\n                                    message: err\n                                });\n                            });\n                        });\n                    } else {\n                        const user = new db.User({\n                            name,\n                            username,\n                            email,\n                            password,\n                            permissions,\n                            _groups: [],\n                            school\n                        });\n                        user.save().then(newUser => {\n                            // console.log('Success:\\n', newUser);\n                            res.status(200).json({\n                                success: true,\n                                userId: newUser._id\n                            });\n                        }).catch(err => {\n                            console.log('Error:\\n', err)\n                            res.status(500).json({\n                                message: err\n                            });\n                        });\n                    }\n                }\n            });\n        }\n    });\n};\n\nuserController.login = (req, res) => {\n    const {username, password} = req.body;\n\n    db.User.findOne({username}).then(user => {\n        user.verifyPassword(password).then(valid => {\n            if (valid) {\n                const token = jwt.sign(\n                    {\n                        // username: user.username,\n                        // name: user.name,\n                        // notifications: user.notifications,\n                        id: user._id,\n                        permissions: user.permissions\n                        // groups: user._groups,\n                        // school: user.school\n                    },\n                    secret,\n                    {expiresIn: '2 days'}\n                );\n                res.status(200).json({\n                    success: valid,\n                    token\n                });\n            } else {\n                console.log('Invalid promise');\n                res.status(200).json({\n                    success: valid\n                });\n            }\n        }).catch(err => {\n            res.status(500).json({\n                message: err\n            });\n        });\n    }).catch((err) => {\n        res.status(500).json({\n            message: err\n        });\n    });\n};\n\nuserController.getGroups = (req, res) => {\n    const user = req.user;\n    const groupId = req.body.groupId;\n    if (user.permissions == 'student' || user.permissions == 'teacher') {\n        db.Group.findById(groupId).then(group => {\n            res.json({\n                group\n            });\n        }).catch(err => {\n            res.status(500).json({\n                message: err\n            });\n        });\n    }\n};\n\nuserController.updateInfo = (req, res) => {\n    const myUser = req.user;\n    const {\n      firstName,\n      lastName,\n      username\n    } = req.body;\n\n    const query = {};\n\n    if(firstName)\n      query.firstName = firstName;\n    if(lastName)\n      query.lastName = lastName;\n    if(username)\n      query.username = username;\n    else if (!firstName && !lastName) {\n        return res.json({\n            changed: false\n        });\n    }\n\n    db.User.findByIdAndUpdate(myUser.id, {\n        $set: query\n    }).then(user => {\n        return res.json({\n            success: true\n        });\n    }).catch(err => {\n        res.status(500).json({\n            message: err\n        });\n    });\n};\n\nuserController.verifyPassword = (req, res) => {\n    const user = req.user;\n    const password = req.body.password;\n    db.User.findById(user.id).then(myUser => {\n        myUser.verifyPassword(password).then(valid => {\n            return res.json({ success: valid });\n        }).catch(err => {\n            res.status(500).json({\n                message: err\n            });\n        });\n    }).catch(err => {\n        res.status(500).json({\n            message: err\n        });\n    });\n};\n\nuserController.changePassword = (req, res) => {\n    const user = req.user;\n    const newPassword = req.body.newPassword;\n\n    db.User.findByIdAndUpdate(user.id, {$set: {password: newPassword}})\n        .then(myUser => {\n            return res.json({success: true});\n        }).catch((err) => {\n        res.status(500).json({\n            message: err\n        });\n    });\n};\n\nuserController.addGroup = (req, res) => {\n    const groupCode = req.body.groupCode;\n    const user = req.user;\n\n    // db.Group.findOne({ code: groupCode }).then(group => {\n    //   console.log(group);\n    // })\n\n    db.Group.findOneAndUpdate({ code: groupCode },\n    { $push: {'_students': user.id} }).then(group => {\n        db.User.findByIdAndUpdate(\n            user.id,\n            { $push: {'_groups': group._id }}).then(myUser => {\n            res.json({ success: true });\n        }).catch(err => {\n            res.status(500).json({\n                body: err\n            });\n        });\n    }).catch(err => {\n      res.status(500).json({\n           body: err\n      });\n    });\n};\n\nuserController.addResult = (req, res) => {\n    const {\n        result,\n        stackName\n    } = req.body;\n\n    const user = req.user;\n\n    const results = {\n        stackName,\n        result\n    };\n\n    db.User.findById(user.id).then(user => {\n        user._results.push(results);\n        user.save();\n        res.json({\n            success: true\n        });\n    }).catch(err => {\n        throw err;\n    });\n\n};\n\nuserController.getNotifications = (req, res) => {\n    const user = req.user;\n\n    db.User.findById(user.id).then(myUser => {\n        res.json({ notifications: myUser.notifications });\n    }).catch((err) => {\n        res.status(500).json({\n            message: err\n        });\n    });\n};\n\nuserController.readNotifs = (req, res) => {\n    const user = req.user;\n    const id = req.body.id;\n\n    db.User.findByIdAndUpdate(user.id,\n    {\n\n    })\n\n    db.User.findById(user.id).then(myUser => {\n        for(let notification of myUser.notifications) {\n            notification.seen = true;\n            console.log(notification);\n        }\n        console.log(myUser.notifications);\n        myUser.save();\n        res.json({ sucess: true });\n    }).catch((err) => {\n        res.status(500).json({\n            message: err\n        });\n    });\n};\n\nuserController.getUser = (req, res) => {\n    const user = req.user;\n\n    db.User.findById(user.id)\n        .populate({\n            path: '_groups',\n            model: 'Group',\n            populate: {\n                path: '_tests',\n                model: 'Stack'\n            }\n        })\n        .then(user => {\n          return res.json({ user })\n        });\n};\n\nexport default userController;\n"]}