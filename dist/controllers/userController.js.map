{"version":3,"sources":["../../server/controllers/userController.js"],"names":["userController","post","req","res","body","firstName","lastName","username","email","password","permissions","groupCode","school","city","User","findOne","err","user","json","error","length","Group","code","then","_groups","group","_id","save","transporter","createTransport","service","secure","port","auth","pass","tls","rejectUnauthorized","HelperOptions","from","to","newUser","subject","text","sendMail","info","console","log","success","status","userId","catch","message","login","verifyPassword","valid","token","sign","id","getGroups","groupId","findById","updateInfo","myUser","query","changed","findByIdAndUpdate","$set","changePassword","newPassword","recoverToken","addGroup","findOneAndUpdate","$push","getNotifications","notifications","removeNotification","filter","notif","notificationsCopy","suc—Åess","getUser","populate","path","model","learnWords","amount","stackId","userResult","pairsLength","Stack","result","stack","results","difference","Math","abs","newAmount","round","$inc","wordsLearnt","recoverPassword","uri","encodeURI","checkToken","sendFeedback","name"],"mappings":"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","file":"userController.js","sourcesContent":["import { verifyPassword, encryptPassword } from 'mongoose-bcrypt';\r\nimport jwt from 'jsonwebtoken';\r\nimport secret from './../secret';\r\nimport helper from './helperFunctions';\r\nimport nodemailer from 'nodemailer';\r\n\r\nimport db from './../models';\r\n\r\nconst userController = {};\r\n\r\nuserController.post = (req, res) => {\r\n    const {\r\n        firstName,\r\n        lastName,\r\n        username,\r\n        email,\r\n        password,\r\n        permissions,\r\n        groupCode,\r\n        school,\r\n        city\r\n    } = req.body;\r\n\r\n    db.User.findOne({username}, (err, user) => {\r\n        if (err)\r\n            throw err;\r\n        else if (user)\r\n            return res.json({error: '–î–∞–Ω–Ω—ã–π –ª–æ–≥–∏–Ω —É–∂–µ –∑–∞–Ω—è—Ç'});\r\n        else {\r\n            db.User.findOne({email}, (err, user) => {\r\n                if (err)\r\n                    throw err;\r\n                else if (user)\r\n                    res.json({error: '–î–∞–Ω–Ω–∞—è —ç–ª–µ–∫—Ç—Ä–æ–Ω–Ω–∞—è –ø–æ—á—Ç–∞ —É–∂–µ –∑–∞–Ω—è—Ç–∞'});\r\n                else {\r\n                    if (!!groupCode.length) {\r\n                        db.Group.findOne({code: groupCode}).then(group => {\r\n                            const user = new db.User({\r\n                                firstName,\r\n                                lastName,\r\n                                username,\r\n                                email,\r\n                                password,\r\n                                permissions,\r\n                                _groups: [group._id],\r\n                                school,\r\n                                city\r\n                            });\r\n                            user.save().then(newUser => {\r\n                                let transporter = nodemailer.createTransport({\r\n                                  service: 'gmail',\r\n                                  secure: false,\r\n                                  port: 25,\r\n                                  auth: {\r\n                                    user: 'easylexlab@gmail.com',\r\n                                    pass: '45aCRawa@hut'\r\n                                  },\r\n                                  tls: {\r\n                                    rejectUnauthorized: false\r\n                                  }\r\n                                });\r\n                                let HelperOptions = {\r\n                                  from: '\"EasyLexLab\" <easylexlab@gmail.com>',\r\n                                  to: newUser.email,\r\n                                  // to: 'easylexlab@gmail.com',\r\n                                  subject: '–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–∞ EasyLexLab',\r\n                                  text: `\r\n                                  –í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª–∏—Å—å –Ω–∞ EasyLexLab, ${newUser.firstName} ${newUser.lastName}.\r\n\r\n                                  –õ–æ–≥–∏–Ω: ${newUser.username}\r\n                                  –ü–∞—Ä–æ–ª—å: ${password}\r\n                                  `\r\n                                };\r\n                                transporter.sendMail(HelperOptions, (error, info) => {\r\n                                  if(error) {\r\n                                    console.log(error);\r\n                                  } else {\r\n                                    return res.json({ success: true })\r\n                                  }\r\n                                });\r\n                                return res.status(200).json({\r\n                                    success: true,\r\n                                    userId: newUser._id\r\n                                });\r\n                            }).catch(err => {\r\n                                res.status(500).json({\r\n                                    message: err\r\n                                });\r\n                            });\r\n                        });\r\n                    } else {\r\n                        const user = new db.User({\r\n                            firstName,\r\n                            lastName,\r\n                            username,\r\n                            email,\r\n                            password,\r\n                            permissions,\r\n                            _groups: [],\r\n                            school,\r\n                            city\r\n                        });\r\n                        user.save().then(newUser => {\r\n                          console.log(newUser);\r\n                          let transporter = nodemailer.createTransport({\r\n                            service: 'gmail',\r\n                            secure: false,\r\n                            port: 25,\r\n                            auth: {\r\n                              user: 'easylexlab@gmail.com',\r\n                              pass: '45aCRawa@hut'\r\n                            },\r\n                            tls: {\r\n                              rejectUnauthorized: false\r\n                            }\r\n                          });\r\n                          let HelperOptions = {\r\n                            from: '\"EasyLexLab\" <easylexlab@gmail.com>',\r\n                            to: email,\r\n                            // to: 'easylexlab@gmail.com',\r\n                            subject: '–†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –Ω–∞ EasyLexLab',\r\n                            text: `–í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª–∏—Å—å –Ω–∞ EasyLexLab, ${firstName} ${lastName}.\\n\\n–õ–æ–≥–∏–Ω: ${username}\\n–ü–∞—Ä–æ–ª—å: ${password}`\r\n                          };\r\n                          transporter.sendMail(HelperOptions, (error, info) => {\r\n                            if(error) {\r\n                              console.log(error);\r\n                            } else {\r\n                              return res.json({ success: true })\r\n                            }\r\n                          });\r\n                          return res.status(200).json({\r\n                                success: true,\r\n                                userId: newUser._id\r\n                            });\r\n                        }).catch(err => {\r\n                            res.status(500).json({\r\n                                message: err\r\n                            });\r\n                        });\r\n                    }\r\n                }\r\n            });\r\n        }\r\n    });\r\n};\r\n\r\nuserController.login = (req, res) => {\r\n    const { username, password } = req.body;\r\n\r\n    db.User.findOne({username}).then(user => {\r\n        user.verifyPassword(password).then(valid => {\r\n            if (valid) {\r\n                const token = jwt.sign(\r\n                    {\r\n                        id: user._id,\r\n                        permissions: user.permissions\r\n                    },\r\n                    secret\r\n                );\r\n                res.status(200).json({\r\n                    success: valid,\r\n                    token\r\n                });\r\n            } else {\r\n                res.status(200).json({\r\n                    success: valid\r\n                });\r\n            }\r\n        }).catch(err => {\r\n            res.status(500).json({\r\n                message: err\r\n            });\r\n        });\r\n    }).catch((err) => {\r\n        res.status(500).json({\r\n            message: err\r\n        });\r\n    });\r\n};\r\n\r\nuserController.getGroups = (req, res) => {\r\n    const user = req.user;\r\n    const groupId = req.body.groupId;\r\n    if (user.permissions == 'student' || user.permissions == 'teacher') {\r\n        db.Group.findById(groupId).then(group => {\r\n            res.json({\r\n                group\r\n            });\r\n        }).catch(err => {\r\n            res.status(500).json({\r\n                message: err\r\n            });\r\n        });\r\n    }\r\n};\r\n\r\nuserController.updateInfo = (req, res) => {\r\n    const myUser = req.user;\r\n    const {\r\n      firstName,\r\n      lastName,\r\n      username\r\n    } = req.body;\r\n\r\n    const query = {};\r\n\r\n    if(firstName)\r\n      query.firstName = firstName;\r\n    if(lastName)\r\n      query.lastName = lastName;\r\n    if(username)\r\n      query.username = username;\r\n    else if (!firstName && !lastName) {\r\n        return res.json({\r\n            changed: false\r\n        });\r\n    }\r\n\r\n    if(query.username) {\r\n        db.User.findOne({ username: query.username }).then(user => {\r\n          if(user)\r\n            return res.json({error: '–î–∞–Ω–Ω—ã–π –ª–æ–≥–∏–Ω —É–∂–µ –∑–∞–Ω—è—Ç'});\r\n          else {\r\n            db.User.findByIdAndUpdate(myUser.id, {\r\n                $set: query\r\n            }).then(user => {\r\n                return res.json({\r\n                    success: true\r\n                });\r\n            }).catch(err => {\r\n                return res.status(500).json({\r\n                    message: err\r\n                });\r\n            });\r\n          }\r\n        })\r\n    } else {\r\n      db.User.findByIdAndUpdate(myUser.id, {\r\n          $set: query\r\n      }).then(user => {\r\n          return res.json({\r\n              success: true\r\n          });\r\n      }).catch(err => {\r\n          return res.status(500).json({\r\n              message: err\r\n          });\r\n      });\r\n    }\r\n};\r\n\r\nuserController.verifyPassword = (req, res) => {\r\n    const user = req.user;\r\n    const password = req.body.password;\r\n    db.User.findById(user.id).then(myUser => {\r\n        myUser.verifyPassword(password).then(valid => {\r\n            return res.json({ success: valid });\r\n        }).catch(err => {\r\n            res.status(500).json({\r\n                message: err\r\n            });\r\n        });\r\n    }).catch(err => {\r\n        res.status(500).json({\r\n            message: err\r\n        });\r\n    });\r\n};\r\n\r\nuserController.changePassword = (req, res) => {\r\n    const user = req.user;\r\n    const newPassword = req.body.newPassword;\r\n\r\n    db.User.findByIdAndUpdate(user.id, {$set: {password: newPassword, recoverToken: ''}})\r\n        .then(myUser => {\r\n            return res.json({success: true});\r\n        }).catch((err) => {\r\n          return res.status(500).json({\r\n            message: err\r\n        });\r\n    });\r\n};\r\n\r\nuserController.addGroup = (req, res) => {\r\n    const groupCode = req.body.groupCode;\r\n    const user = req.user;\r\n\r\n    db.Group.findOneAndUpdate({ code: groupCode },\r\n    { $push: {'_students': user.id} }).then(group => {\r\n        db.User.findByIdAndUpdate(\r\n            user.id,\r\n            { $push: {'_groups': group._id }}).then(myUser => {\r\n            res.json({ success: true });\r\n        }).catch(err => {\r\n            res.status(500).json({\r\n                body: err\r\n            });\r\n        });\r\n    }).catch(err => {\r\n      res.status(500).json({\r\n           body: err\r\n      });\r\n    });\r\n};\r\n\r\n\r\nuserController.getNotifications = (req, res) => {\r\n    const user = req.user;\r\n\r\n    db.User.findById(user.id).then(myUser => {\r\n        res.json({ notifications: myUser.notifications });\r\n    }).catch((err) => {\r\n        res.status(500).json({\r\n            message: err\r\n        });\r\n    });\r\n};\r\n\r\nuserController.removeNotification = (req, res) => {\r\n    const user = req.user;\r\n    const id = req.body.id;\r\n\r\n    db.User.findById(user.id).then(myUser => {\r\n        myUser.notifications = myUser.notifications.filter(notif => notif.id != id);\r\n        let notificationsCopy = myUser.notifications;\r\n        myUser.save();\r\n        res.json({ suc—Åess: true, notifications: notificationsCopy });\r\n    }).catch((err) => {\r\n        res.status(500).json({\r\n            message: err\r\n        });\r\n    });\r\n};\r\n\r\nuserController.getUser = (req, res) => {\r\n    const user = req.user;\r\n\r\n    db.User.findById(user.id)\r\n        .populate({\r\n            path: '_groups',\r\n            model: 'Group',\r\n            populate: {\r\n                path: '_tests',\r\n                model: 'Stack'\r\n            }\r\n        })\r\n        .then(user => {\r\n          return res.json({ user })\r\n        });\r\n};\r\n\r\nuserController.learnWords = (req, res) => {\r\n  const user = req.user;\r\n  const {\r\n    amount,\r\n    stackId,\r\n    userResult,\r\n    pairsLength\r\n  } = req.body;\r\n\r\n  db.Stack.findById(stackId).then(stack => {\r\n    let result = stack.results.filter(result => result.userId == user.id);\r\n    if(result[0]) {\r\n      let difference = Math.abs(result[0].result - userResult);\r\n      let newAmount = Math.round(pairsLength * (difference / 100));\r\n      db.User.findByIdAndUpdate(user.id, { $inc: { wordsLearnt: newAmount } }).then(success => {\r\n        return res.json({ success: true });\r\n      })\r\n    } else {\r\n      db.User.findByIdAndUpdate(user.id, { $inc: { wordsLearnt: amount } }).then(success => {\r\n        return res.json({ success: true });\r\n      })\r\n    }\r\n  })\r\n};\r\n\r\nuserController.recoverPassword = (req, res) => {\r\n  const email = req.body.email;\r\n\r\n  db.User.findOne({ email }).then(user => {\r\n    if(!user) {\r\n      return res.json({ success: false })\r\n    }\r\n    const token = jwt.sign(\r\n      {\r\n        id: user._id,\r\n        email\r\n      },\r\n      secret\r\n    );\r\n    let uri = encodeURI(token);\r\n    user.recoverToken = token;\r\n    user.save().then(res => {\r\n      let transporter = nodemailer.createTransport({\r\n        service: 'gmail',\r\n        secure: false,\r\n        port: 25,\r\n        auth: {\r\n          user: 'easylexlab@gmail.com',\r\n          pass: '45aCRawa@hut'\r\n        },\r\n        tls: {\r\n          rejectUnauthorized: false\r\n        }\r\n      });\r\n      let HelperOptions = {\r\n        from: '\"EasyLexLab\" <easylexlab@gmail.com>',\r\n        to: user.email,\r\n        // to: 'easylexlab@gmail.com',\r\n        subject: '–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–∞—Ä–æ–ª—è',\r\n        text: `–ß—Ç–æ–±—ã –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø–∞—Ä–æ–ª—å, –ø–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —ç—Ç–æ–π —Å—Å—ã–ª–∫–µ: easylexlab.ru/recover/${token}`\r\n      };\r\n      transporter.sendMail(HelperOptions, (error, info) => {\r\n        if(error) {\r\n          console.log(error);\r\n        } else {\r\n          return res.json({ success: true })\r\n        }\r\n      });\r\n    });\r\n  })\r\n};\r\n\r\nuserController.checkToken = (req, res) => {\r\n  const token = req.body.token;\r\n  db.User.findOne({ recoverToken: token }).then(user => {\r\n    if(user) {\r\n      return res.json({ success: true });\r\n    }\r\n    return res.json({ success: false });\r\n  });\r\n};\r\n\r\nuserController.sendFeedback = (req, res) => {\r\n  const user = req.user;\r\n  const {\r\n    name,\r\n    text,\r\n    email\r\n  } = req.body;\r\n\r\n  let transporter = nodemailer.createTransport({\r\n    service: 'gmail',\r\n    secure: false,\r\n    port: 25,\r\n    auth: {\r\n      user: 'easylexlab@gmail.com',\r\n      pass: '45aCRawa@hut'\r\n    },\r\n    tls: {\r\n      rejectUnauthorized: false\r\n    }\r\n  });\r\n  let HelperOptions = {\r\n    from: `${name} <${email}>`,\r\n    to: 'easylexlab@gmail.com',\r\n    subject: '–û—Ç–∑—ã–≤',\r\n    text: `${name}: ${text}\\n${email}`\r\n  };\r\n  transporter.sendMail(HelperOptions, (error, info) => {\r\n    if(error) {\r\n      console.log(error);\r\n    } else {\r\n      return res.json({ success: true })\r\n    }\r\n  });\r\n};\r\n\r\nexport default userController;\r\n"]}