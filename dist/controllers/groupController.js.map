{"version":3,"sources":["../../server/controllers/groupController.js"],"names":["locale","groupController","post","req","res","body","name","grade","user","permissions","code","Group","findOne","err","group","index","randomInteger","newCode","i","length","_teacher","id","save","then","newGroup","status","json","success","data","catch","message","delete","groupId","findByIdAndRemove","addStudent","groupCode","studentId","findOneAndUpdate","$push","existingGroup","getGroups","userId","find","populate","path","select","match","groups","getGroup","findById","addTest","stackId","Stack","_tests","push","stack","_id","error","regCode","newMsg","msgText","User","authorId","userAccount","author","firstName","lastName","pic","picUrl","text","date","format","notification","type","seen","findByIdAndUpdate","messages","update","_groups","$in","notifications","multi","changeName","$set","deleteMsg","msgId","filter","item","deleteGroup","$pull","removeStudent"],"mappings":";;;;;;AAAA;;;;AACA;;;;AAEA;;;;AACA;;;;AACA;;;;;;AACA,iBAAOA,MAAP,CAAc,IAAd;;AAEA,IAAMC,kBAAkB,EAAxB;;AAEA;AACAA,gBAAgBC,IAAhB,GAAuB,UAACC,GAAD,EAAMC,GAAN,EAAc;AAAA,oBAI7BD,IAAIE,IAJyB;AAAA,QAE7BC,IAF6B,aAE7BA,IAF6B;AAAA,QAG7BC,KAH6B,aAG7BA,KAH6B;;;AAMjC,QAAMC,OAAOL,IAAIK,IAAjB;;AAEA,QAAIA,KAAKC,WAAL,IAAoB,OAApB,IAA+BD,KAAKC,WAAL,IAAoB,SAAvD,EAAkE;AAC9D,YAAMC,OAAO,0BAAU,IAAV,EAAgB,CAAhB,CAAb;AACA,yBAAGC,KAAH,CAASC,OAAT,CAAiB,EAACF,UAAD,EAAjB,EAAyB,UAACG,GAAD,EAAMC,KAAN,EAAgB;AACrC,gBAAID,GAAJ,EACI,MAAMA,GAAN;AACJ,gBAAIC,KAAJ,EAAW;AACP,oBAAIC,QAAQ,0BAAOC,aAAP,CAAqB,CAArB,EAAwB,CAAxB,CAAZ;AACA,oBAAIC,UAAU,EAAd;AACA,qBAAK,IAAIC,IAAI,CAAb,EAAgBA,IAAIR,KAAKS,MAAzB,EAAiCD,GAAjC,EAAsC;AAClC,wBAAIA,KAAKH,KAAT,EAAgB;AACZE,mCAAWP,KAAKQ,CAAL,CAAX;AACH,qBAFD,MAEO;AACHD,mCAAW,0BAAU,IAAV,EAAgB,CAAhB,CAAX;AACH;AACJ;AACD,oBAAMH,SAAQ,IAAI,iBAAGH,KAAP,CAAa;AACvBL,8BADuB;AAEvBI,0BAAMO,OAFiB;AAGvBV,gCAHuB;AAIvBa,8BAAUZ,KAAKa;AAJQ,iBAAb,CAAd;AAMAP,uBAAMQ,IAAN,GAAaC,IAAb,CAAkB,UAACC,QAAD,EAAc;AAC5B,2BAAOpB,IAAIqB,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AACxBC,iCAAS,IADe;AAExBC,8BAAMJ;AAFkB,qBAArB,CAAP;AAIH,iBALD,EAKGK,KALH,CAKS,UAAChB,GAAD,EAAS;AACd,2BAAOT,IAAIqB,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AACxBI,iCAASjB;AADe,qBAArB,CAAP;AAGH,iBATD;AAUH,aA1BD,MA0BO;AACH,oBAAMC,UAAQ,IAAI,iBAAGH,KAAP,CAAa;AACvBL,8BADuB;AAEvBI,8BAFuB;AAGvBH,gCAHuB;AAIvBa,8BAAUZ,KAAKa;AAJQ,iBAAb,CAAd;;AAOAP,wBAAMQ,IAAN,GAAaC,IAAb,CAAkB,UAACC,QAAD,EAAc;AAC5B,2BAAOpB,IAAIqB,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AACxBC,iCAAS,IADe;AAExBC,8BAAMJ;AAFkB,qBAArB,CAAP;AAIH,iBALD,EAKGK,KALH,CAKS,UAAChB,GAAD,EAAS;AACd,2BAAOT,IAAIqB,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AACxBI,iCAASjB;AADe,qBAArB,CAAP;AAGH,iBATD;AAUH;AACJ,SAhDD;AAiDH,KAnDD,MAmDO;AACH,eAAOT,IAAIqB,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AACxBI,qBAAS;AADe,SAArB,CAAP;AAGH;AAEJ,CAjED;;AAmEA;AACA7B,gBAAgB8B,MAAhB,GAAyB,UAAC5B,GAAD,EAAMC,GAAN,EAAc;AACnC,QAAM4B,UAAU7B,IAAIE,IAAJ,CAAS2B,OAAzB;AACA,QAAMxB,OAAOL,IAAIK,IAAjB;;AAEA,QAAIA,KAAKC,WAAL,IAAoB,OAApB,IAA+BD,KAAKC,WAAL,IAAoB,SAAvD,EAAkE;AAC9D,yBAAGE,KAAH,CAASsB,iBAAT,CAA2BD,OAA3B,EAAoCT,IAApC,CAAyC,YAAM;AAC3C,mBAAOnB,IAAIqB,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AACxBC,yBAAS;AADe,aAArB,CAAP;AAGH,SAJD,EAIGE,KAJH,CAIS,UAAChB,GAAD,EAAS;AACd,mBAAOT,IAAIqB,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AACxBI,yBAASjB;AADe,aAArB,CAAP;AAGH,SARD;AASH,KAVD,MAUO;AACH,eAAOT,IAAIqB,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AACxBI,qBAAS;AADe,SAArB,CAAP;AAGH;AAEJ,CApBD;;AAsBA;AACA7B,gBAAgBiC,UAAhB,GAA6B,UAAC/B,GAAD,EAAMC,GAAN,EAAc;AAAA,qBAInCD,IAAIE,IAJ+B;AAAA,QAEnC8B,SAFmC,cAEnCA,SAFmC;AAAA,QAGnCC,SAHmC,cAGnCA,SAHmC;;;AAMvC,qBAAGzB,KAAH,CAAS0B,gBAAT,CACI,EAAC3B,MAAMyB,SAAP,EADJ,EAEI,EAACG,OAAO,EAAC,aAAaF,SAAd,EAAR,EAFJ,EAGEb,IAHF,CAGO,UAACgB,aAAD,EAAmB;AACtB,eAAOnC,IAAIqB,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AACxBC,qBAAS;AADe,SAArB,CAAP;AAGH,KAPD,EAOGE,KAPH,CAOS,UAAChB,GAAD,EAAS;AACd,eAAOT,IAAIqB,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AACxBI,qBAASjB;AADe,SAArB,CAAP;AAGH,KAXD;AAaH,CAnBD;;AAqBA;AACAZ,gBAAgBuC,SAAhB,GAA4B,UAACrC,GAAD,EAAMC,GAAN,EAAc;AACtC,QAAMqC,SAAStC,IAAIK,IAAJ,CAASa,EAAxB;;AAEA,qBAAGV,KAAH,CAAS+B,IAAT,CAAc,EAACtB,UAAUqB,MAAX,EAAd,EAAkCE,QAAlC,CAA2C;AACvCC,cAAM,UADiC;AAEvCC,gBAAQ,6BAF+B;AAGvCC,eAAO,EAAC,aAAa,KAAd;AAHgC,KAA3C,EAIGH,QAJH,CAIY;AACRC,cAAM,QADE;AAERC,gBAAQ;AAFA,KAJZ,EAOGF,QAPH,CAOY;AACRC,cAAM,WADE;AAERC,gBAAQ,eAFA;AAGRC,eAAO,EAAC,aAAa,KAAd;AAHC,KAPZ,EAWGvB,IAXH,CAWQ,UAACwB,MAAD,EAAY;AAChB,eAAO3C,IAAIqB,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AACxBC,qBAAS,IADe;AAExBC,kBAAMmB;AAFkB,SAArB,CAAP;AAIH,KAhBD,EAgBGlB,KAhBH,CAgBS,UAAChB,GAAD,EAAS;AACdT,YAAIqB,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AACjBI,qBAASjB;AADQ,SAArB;AAGH,KApBD;AAsBH,CAzBD;;AA2BA;AACAZ,gBAAgB+C,QAAhB,GAA2B,UAAC7C,GAAD,EAAMC,GAAN,EAAc;AACrC,QAAM4B,UAAU7B,IAAIE,IAAJ,CAAS2B,OAAzB;AACA,qBAAGrB,KAAH,CAASsC,QAAT,CAAkBjB,OAAlB,EAA2BW,QAA3B,CAAoC;AAChCC,cAAM,WAD0B;AAEhCC,gBAAQ,EAFwB;AAGhCC,eAAO,EAAC,aAAa,KAAd;AAHyB,KAApC,EAIGH,QAJH,CAIY;AACRC,cAAM,QADE;AAERC,gBAAQ;AAFA,KAJZ,EAOGtB,IAPH,CAOQ,iBAAS;AACb,eAAOnB,IAAIqB,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AACxBC,qBAAS,IADe;AAExBb;AAFwB,SAArB,CAAP;AAIH,KAZD,EAYGe,KAZH,CAYS,UAAChB,GAAD,EAAS;AACdT,YAAIqB,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AACjBI,qBAASjB;AADQ,SAArB;AAGH,KAhBD;AAkBH,CApBD;;AAsBA;AACAZ,gBAAgBiD,OAAhB,GAA0B,UAAC/C,GAAD,EAAMC,GAAN,EAAc;AAAA,qBAIhCD,IAAIE,IAJ4B;AAAA,QAEhC2B,OAFgC,cAEhCA,OAFgC;AAAA,QAGhCmB,OAHgC,cAGhCA,OAHgC;;;AAMpC,QAAM3C,OAAOL,IAAIK,IAAjB;;AAEA,QAAIA,KAAKC,WAAL,IAAoB,SAApB,IAAiCD,KAAKC,WAAL,IAAoB,OAAzD,EAAkE;AAC9D,yBAAG2C,KAAH,CAASH,QAAT,CAAkBE,OAAlB,EAA2B5B,IAA3B,CAAgC,iBAAS;AACrC,6BAAGZ,KAAH,CAASsC,QAAT,CAAkBjB,OAAlB,EAA2BT,IAA3B,CAAgC,iBAAS;AACrCT,sBAAMuC,MAAN,CAAaC,IAAb,CAAkBC,MAAMC,GAAxB;AACA1C,sBAAMQ,IAAN,GAAaC,IAAb,CAAkB,eAAO;AACrBnB,wBAAIqB,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,EAACC,SAAS,IAAV,EAArB;AACH,iBAFD,EAEGE,KAFH,CAES,iBAAS;AACd,0BAAM4B,KAAN;AACH,iBAJD;AAKH,aAPD,EAOG5B,KAPH,CAOS,eAAO;AACZ,sBAAMhB,GAAN;AACH,aATD;AAUH,SAXD,EAWGgB,KAXH,CAWS,eAAO;AACZ,kBAAMhB,GAAN;AACH,SAbD;AAcH,KAfD,MAeOT,IAAIqB,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,EAAC,SAAS,gCAAV,EAArB;AAEV,CAzBD;;AA2BA;AACAzB,gBAAgByD,OAAhB,GAA0B,UAACvD,GAAD,EAAMC,GAAN,EAAc;AACpC,QAAM4B,UAAU7B,IAAIE,IAAJ,CAAS2B,OAAzB;AACA,QAAMxB,OAAOL,IAAIK,IAAjB;;AAEA,QAAIA,KAAKC,WAAL,IAAoB,SAApB,IAAiCD,KAAKC,WAAL,IAAoB,OAAzD,EAAkE;AAC9D,yBAAGE,KAAH,CAASsC,QAAT,CAAkBjB,OAAlB,EAA2BT,IAA3B,CAAgC,iBAAS;AACrC,mBAAOnB,IAAIsB,IAAJ,CAAS;AACZC,yBAAS,IADG;AAEZQ,2BAAWrB,MAAMJ;AAFL,aAAT,CAAP;AAIH,SALD;AAMH;AACJ,CAZD;;AAcAT,gBAAgB0D,MAAhB,GAAyB,UAACxD,GAAD,EAAMC,GAAN,EAAc;AACnC,QAAMI,OAAOL,IAAIK,IAAjB;AADmC,qBAK/BL,IAAIE,IAL2B;AAAA,QAG/B2B,OAH+B,cAG/BA,OAH+B;AAAA,QAI/B4B,OAJ+B,cAI/BA,OAJ+B;;;AAQnC,QAAIpD,KAAKC,WAAL,IAAoB,SAApB,IAAiCD,KAAKC,WAAL,IAAoB,OAAzD,EAAkE;AAC9D,yBAAGoD,IAAH,CAAQZ,QAAR,CAAiBzC,KAAKa,EAAtB,EAA0BE,IAA1B,CAA+B,uBAAe;AAC1C,gBAAMO,UAAU;AACZgC,0BAAUC,YAAYP,GADV;AAEZnC,oBAAI,0BAAU,GAAV,EAAe,EAAf,CAFQ;AAGZ2C,wBAAQD,YAAYE,SAAZ,GAAwB,GAAxB,GAA8BF,YAAYG,QAHtC;AAIZC,qBAAKJ,YAAYK,MAJL;AAKZC,sBAAMT,OALM;AAMZU,sBAAM,wBAASC,MAAT,CAAgB,IAAhB;AANM,aAAhB;;AASA,gBAAMC,eAAe;AACjBC,sBAAM,QADW;AAEjBX,0BAAUC,YAAYP,GAFL;AAGjBQ,wBAAQD,YAAYE,SAAZ,GAAwB,GAAxB,GAA8BF,YAAYG,QAHjC;AAIjBC,qBAAKJ,YAAYK,MAJA;AAKjBC,sBAASN,YAAYE,SAAZ,GAAwB,GAAxB,GAA8BF,YAAYG,QAAnD,8GALiB;AAMjBQ,sBAAM,KANW;AAOjBJ,sBAAM,wBAASC,MAAT,CAAgB,IAAhB,CAPW;AAQjBlD,oBAAI,0BAAU,IAAV,EAAgB,EAAhB;AARa,aAArB;;AAYA,6BAAGV,KAAH,CAASgE,iBAAT,CAA2B3C,OAA3B,EAAoC;AAChCM,uBAAO,EAAEsC,UAAU9C,OAAZ;AADyB,aAApC,EAEGP,IAFH,CAEQ,iBAAS;AACb,iCAAGsC,IAAH,CAAQgB,MAAR,CAAe,EAAEC,SAAS,EAAEC,KAAK,CAAC/C,OAAD,CAAP,EAAX,EAAf,EACI,EAAEM,OAAO,EAAE0C,eAAeR,YAAjB,EAAT,EADJ,EAC+C;AACzCS,2BAAO;AADkC,iBAD/C,EAGO1D,IAHP,CAGY,mBAAW;AACnBnB,wBAAIsB,IAAJ,CAAS,EAAEC,SAAS,IAAX,EAAiBG,gBAAjB,EAAT;AACH,iBALD,EAKGD,KALH,CAKS,iBAAS;AACd,0BAAM4B,KAAN;AACH,iBAPD;AAQH,aAXD,EAWG5B,KAXH,CAWS,eAAO;AACZ,sBAAMhB,GAAN;AACH,aAbD;AAcH,SApCD,EAoCGgB,KApCH,CAoCS,eAAO;AACZ,kBAAMhB,GAAN;AACH,SAtCD;AAuCH;AACJ,CAjDD;;AAmDAZ,gBAAgBiF,UAAhB,GAA6B,UAAC/E,GAAD,EAAMC,GAAN,EAAc;AAAA,qBAIrCD,IAAIE,IAJiC;AAAA,QAEvC2B,OAFuC,cAEvCA,OAFuC;AAAA,QAGvC1B,IAHuC,cAGvCA,IAHuC;;AAKzC,QAAME,OAAOL,IAAIK,IAAjB;;AAEA,QAAGA,KAAKC,WAAL,IAAoB,SAApB,IAAiCD,KAAKC,WAAL,IAAoB,OAAxD,EAAiE;AAC/D,yBAAGE,KAAH,CAASgE,iBAAT,CAA2B3C,OAA3B,EAAoC,EAAEmD,MAAM,EAAE7E,UAAF,EAAR,EAApC,EAAwDiB,IAAxD,CAA6D,mBAAW;AACtE,mBAAOnB,IAAIsB,IAAJ,CAAS,EAAEC,SAAS,IAAX,EAAT,CAAP;AACD,SAFD;AAGD;AACF,CAZD;;AAcA1B,gBAAgBmF,SAAhB,GAA4B,UAACjF,GAAD,EAAMC,GAAN,EAAc;AAAA,qBAIpCD,IAAIE,IAJgC;AAAA,QAEtC2B,OAFsC,cAEtCA,OAFsC;AAAA,QAGtCqD,KAHsC,cAGtCA,KAHsC;;AAKxC,QAAM7E,OAAOL,IAAIK,IAAjB;;AAEA,QAAGA,KAAKC,WAAL,IAAoB,SAApB,IAAiCD,KAAKC,WAAL,IAAoB,OAAxD,EAAiE;AAC/D,yBAAGE,KAAH,CAASsC,QAAT,CAAkBjB,OAAlB,EAA2BT,IAA3B,CAAgC,iBAAS;AACvCT,kBAAM8D,QAAN,GAAiB9D,MAAM8D,QAAN,CAAeU,MAAf,CAAsB;AAAA,uBAAQC,KAAKlE,EAAL,IAAWgE,KAAnB;AAAA,aAAtB,CAAjB;AACAvE,kBAAMQ,IAAN,GAAaC,IAAb,CAAkB;AAAA,uBAAKnB,IAAIsB,IAAJ,CAAS,EAAEC,SAAS,IAAX,EAAT,CAAL;AAAA,aAAlB;AACD,SAHD;AAID;AACF,CAbD;;AAeA1B,gBAAgBuF,WAAhB,GAA8B,UAACrF,GAAD,EAAMC,GAAN,EAAc;AAC1C,QAAM4B,UAAU7B,IAAIE,IAAJ,CAAS2B,OAAzB;AACA,QAAMxB,OAAOL,IAAIK,IAAjB;;AAEA,QAAGA,KAAKC,WAAL,IAAoB,SAApB,IAAiCD,KAAKC,WAAL,IAAoB,OAAxD,EAAiE;AAC/D,yBAAGE,KAAH,CAASsB,iBAAT,CAA2BD,OAA3B,EAAoCT,IAApC,CAAyC,mBAAW;AAChD,6BAAGsC,IAAH,CAAQgB,MAAR,CAAe,EAAEC,SAAS,EAAEC,KAAK,CAAC/C,OAAD,CAAP,EAAX,EAAf,EACI,EAAEyD,OAAO,EAAEX,SAAS9C,OAAX,EAAT,EADJ,EACqC;AACjCiD,uBAAO;AAD0B,aADrC,EAGG1D,IAHH,CAGQ,mBAAW;AACf,uBAAOnB,IAAIsB,IAAJ,CAAS,EAAEC,SAAS,IAAX,EAAT,CAAP;AACH,aALD;AAMH,SAPD;AAQD;AACF,CAdD;;AAgBA1B,gBAAgByF,aAAhB,GAAgC,UAACvF,GAAD,EAAMC,GAAN,EAAc;AAAA,qBAIxCD,IAAIE,IAJoC;AAAA,QAE1C2B,OAF0C,cAE1CA,OAF0C;AAAA,QAG1CS,MAH0C,cAG1CA,MAH0C;;AAK5C,QAAMjC,OAAOL,IAAIK,IAAjB;;AAEA,QAAGA,KAAKC,WAAL,IAAoB,SAApB,IAAiCD,KAAKC,WAAL,IAAoB,OAAxD,EAAiE;AAC/D,yBAAGE,KAAH,CAASgE,iBAAT,CAA2B3C,OAA3B,EAAoC;AAClCyD,mBAAO,EAAE,aAAahD,MAAf;AAD2B,SAApC,EAEGlB,IAFH,CAEQ,mBAAW;AACf,6BAAGsC,IAAH,CAAQc,iBAAR,CAA0BlC,MAA1B,EAAkC,EAAEgD,OAAO,EAAE,WAAWzD,OAAb,EAAT,EAAlC,EAAqET,IAArE,CAA0E,aAAK;AAC3EnB,oBAAIsB,IAAJ,CAAS,EAAEC,SAAS,IAAX,EAAT;AACH,aAFD;AAGH,SAND;AAOD;AACF,CAhBD;;kBAkBe1B,e","file":"groupController.js","sourcesContent":["import randomize from 'randomatic';\nimport moment from 'moment';\n\nimport db from './../models';\nimport secret from './../secret';\nimport helper from './helperFunctions';\nmoment.locale('ru');\n\nconst groupController = {};\n\n// New group\ngroupController.post = (req, res) => {\n    const {\n        name,\n        grade\n    } = req.body;\n\n    const user = req.user;\n\n    if (user.permissions == \"admin\" || user.permissions == \"teacher\") {\n        const code = randomize('A0', 5);\n        db.Group.findOne({code}, (err, group) => {\n            if (err)\n                throw err;\n            if (group) {\n                let index = helper.randomInteger(1, 5);\n                var newCode = '';\n                for (let i = 0; i < code.length; i++) {\n                    if (i != index) {\n                        newCode += code[i];\n                    } else {\n                        newCode += randomize('A0', 1);\n                    }\n                }\n                const group = new db.Group({\n                    name,\n                    code: newCode,\n                    grade,\n                    _teacher: user.id\n                });\n                group.save().then((newGroup) => {\n                    return res.status(200).json({\n                        success: true,\n                        data: newGroup\n                    });\n                }).catch((err) => {\n                    return res.status(500).json({\n                        message: err\n                    });\n                });\n            } else {\n                const group = new db.Group({\n                    name,\n                    code,\n                    grade,\n                    _teacher: user.id\n                });\n\n                group.save().then((newGroup) => {\n                    return res.status(200).json({\n                        success: true,\n                        data: newGroup\n                    });\n                }).catch((err) => {\n                    return res.status(500).json({\n                        message: err\n                    });\n                });\n            }\n        });\n    } else {\n        return res.status(501).json({\n            message: 'Access denied'\n        });\n    }\n\n};\n\n// Remove group\ngroupController.delete = (req, res) => {\n    const groupId = req.body.groupId;\n    const user = req.user;\n\n    if (user.permissions == \"admin\" || user.permissions == \"teacher\") {\n        db.Group.findByIdAndRemove(groupId).then(() => {\n            return res.status(200).json({\n                success: true\n            });\n        }).catch((err) => {\n            return res.status(500).json({\n                message: err\n            });\n        });\n    } else {\n        return res.status(501).json({\n            message: 'Access denied'\n        });\n    }\n\n};\n\n// Add student\ngroupController.addStudent = (req, res) => {\n    const {\n        groupCode,\n        studentId\n    } = req.body;\n\n    db.Group.findOneAndUpdate(\n        {code: groupCode},\n        {$push: {'_students': studentId}},\n    ).then((existingGroup) => {\n        return res.status(200).json({\n            success: true\n        });\n    }).catch((err) => {\n        return res.status(500).json({\n            message: err\n        });\n    });\n\n};\n\n// Get groups of teacher\ngroupController.getGroups = (req, res) => {\n    const userId = req.user.id;\n\n    db.Group.find({_teacher: userId}).populate({\n        path: '_teacher',\n        select: 'name username createdAt _id',\n        match: {'isDeleted': false}\n    }).populate({\n        path: '_tests',\n        select: 'name tasks timeToDo _group attempts results'\n    }).populate({\n        path: '_students',\n        select: 'name username',\n        match: {'isDeleted': false}\n    }).then((groups) => {\n        return res.status(200).json({\n            success: true,\n            data: groups\n        });\n    }).catch((err) => {\n        res.status(500).json({\n            message: err\n        })\n    });\n\n};\n\n// Watch one exact group\ngroupController.getGroup = (req, res) => {\n    const groupId = req.body.groupId;\n    db.Group.findById(groupId).populate({\n        path: '_students',\n        select: '',\n        match: {'isDeleted': false}\n    }).populate({\n        path: '_tests',\n        select: 'name tasks timeToDo _group attempts results'\n    }).then(group => {\n        return res.status(200).json({\n            success: true,\n            group\n        });\n    }).catch((err) => {\n        res.status(500).json({\n            message: err\n        });\n    });\n\n};\n\n// Stick test to group\ngroupController.addTest = (req, res) => {\n    const {\n        groupId,\n        stackId\n    } = req.body;\n\n    const user = req.user;\n\n    if (user.permissions == 'teacher' || user.permissions == 'admin') {\n        db.Stack.findById(stackId).then(stack => {\n            db.Group.findById(groupId).then(group => {\n                group._tests.push(stack._id);\n                group.save().then(suc => {\n                    res.status(200).json({success: true});\n                }).catch(error => {\n                    throw error;\n                });\n            }).catch(err => {\n                throw err;\n            });\n        }).catch(err => {\n            throw err;\n        });\n    } else res.status(501).json({'error': 'No permissions for this action'});\n\n};\n\n// Registration link\ngroupController.regCode = (req, res) => {\n    const groupId = req.body.groupId;\n    const user = req.user;\n\n    if (user.permissions == 'teacher' || user.permissions == 'admin') {\n        db.Group.findById(groupId).then(group => {\n            return res.json({\n                success: true,\n                groupCode: group.code\n            });\n        });\n    }\n};\n\ngroupController.newMsg = (req, res) => {\n    const user = req.user;\n    const {\n        groupId,\n        msgText\n    } = req.body;\n\n\n    if (user.permissions == 'teacher' || user.permissions == 'admin') {\n        db.User.findById(user.id).then(userAccount => {\n            const message = {\n                authorId: userAccount._id,\n                id: randomize('*', 15),\n                author: userAccount.firstName + \" \" + userAccount.lastName,\n                pic: userAccount.picUrl,\n                text: msgText,\n                date: moment().format('LL')\n            };\n\n            const notification = {\n                type: 'newMsg',\n                authorId: userAccount._id,\n                author: userAccount.firstName + \" \" + userAccount.lastName,\n                pic: userAccount.picUrl,\n                text: `${userAccount.firstName + \" \" + userAccount.lastName} отправил сообщение.`,\n                seen: false,\n                date: moment().format('LL'),\n                id: randomize('0A', 10)\n            };\n\n\n            db.Group.findByIdAndUpdate(groupId, {\n                $push: { messages: message }\n            }).then(group => {\n                db.User.update({ _groups: { $in: [groupId] }},\n                    { $push: { notifications: notification }}, {\n                      multi: true\n                    }).then(success => {\n                    res.json({ success: true, message });\n                }).catch(error => {\n                    throw error\n                });\n            }).catch(err => {\n                throw err\n            });\n        }).catch(err => {\n            throw err\n        });\n    }\n};\n\ngroupController.changeName = (req, res) => {\n  const {\n    groupId,\n    name\n  } = req.body;\n  const user = req.user;\n\n  if(user.permissions == 'teacher' || user.permissions == 'admin') {\n    db.Group.findByIdAndUpdate(groupId, { $set: { name } }).then(success => {\n      return res.json({ success: true });\n    });\n  }\n};\n\ngroupController.deleteMsg = (req, res) => {\n  const {\n    groupId,\n    msgId\n  } = req.body;\n  const user = req.user;\n\n  if(user.permissions == 'teacher' || user.permissions == 'admin') {\n    db.Group.findById(groupId).then(group => {\n      group.messages = group.messages.filter(item => item.id != msgId);\n      group.save().then(s => res.json({ success: true }));\n    });\n  }\n};\n\ngroupController.deleteGroup = (req, res) => {\n  const groupId = req.body.groupId;\n  const user = req.user;\n\n  if(user.permissions == 'teacher' || user.permissions == 'admin') {\n    db.Group.findByIdAndRemove(groupId).then(success => {\n        db.User.update({ _groups: { $in: [groupId] } },\n            { $pull: { _groups: groupId } }, {\n            multi: true\n        }).then(success => {\n            return res.json({ success: true })\n        })\n    });\n  }\n};\n\ngroupController.removeStudent = (req, res) => {\n  const {\n    groupId,\n    userId\n  } = req.body;\n  const user = req.user;\n\n  if(user.permissions == 'teacher' || user.permissions == 'admin') {\n    db.Group.findByIdAndUpdate(groupId, {\n      $pull: { '_students': userId }\n    }).then(success => { \n        db.User.findByIdAndUpdate(userId, { $pull: { '_groups': groupId } }).then(r => {\n            res.json({ success: true })\n        })\n    });\n  }\n};\n\nexport default groupController;\n"]}