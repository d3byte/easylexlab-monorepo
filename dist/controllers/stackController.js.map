{"version":3,"sources":["../../server/controllers/stackController.js"],"names":["stackController","locale","post","req","res","body","name","tasks","timeToDo","groupId","attempts","user","permissions","stack","Stack","_group","deadline","add","format","save","then","User","findById","id","notification","type","authorId","userAccount","_id","author","firstName","lastName","pic","picUrl","text","seen","date","subtract","update","_groups","$in","$push","notifications","multi","json","success","catch","error","status","err","getTests","find","populate","path","select","stacks","getTest","testId","addResult","result","stackId","username","userId","model","results","groupName","push","updateResult","$elemMatch","$set"],"mappings":"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","file":"stackController.js","sourcesContent":["import jwt from 'jsonwebtoken';\nimport randomize from 'randomatic';\nimport _ from 'lodash';\nimport moment from 'moment';\nimport secret from './../secret';\n\nimport db from './../models';\n\nimport helper from './helperFunctions';\n\nconst stackController = {};\n\nmoment.locale('ru');\n\n// New stack\nstackController.post = (req, res) => {\n    const {\n        name,\n        tasks,\n        timeToDo,\n        groupId,\n        attempts\n    } = req.body;\n\n    const user = req.user;\n\n    if(user.permissions == \"teacher\" || user.permissions == \"admin\") {\n        const stack = new db.Stack({\n            name,\n            tasks,\n            timeToDo,\n            _group: groupId,\n            attempts,\n            deadline: moment().add(timeToDo, 'days').format('LL')\n        });\n        stack.save().then(stack => {\n            db.User.findById(user.id).then(userAccount => {\n              const notification = {\n                  type: 'newTask',\n                  authorId: userAccount._id,\n                  author: userAccount.firstName + \" \" + userAccount.lastName,\n                  pic: userAccount.picUrl,\n                  text: `${userAccount.firstName + \" \" + userAccount.lastName} создал новое задание.`,\n                  seen: false,\n                  date: moment().subtract(timeToDo, 'days').format('LL'),\n                  id: randomize('0A', 10)\n              };\n              db.User.update({ _groups: { $in: [groupId] }},\n                  { $push: { notifications: notification }}, {\n                    multi: true\n                  }).then(success => {\n                  return res.json({ success: true, stack });\n              }).catch(error => {\n                  throw error\n              });\n            })\n        }).catch(err => {\n            return res.status(500).json({err: 'error'});\n        });\n    }\n};\n\n// Get stacks of one exact group\nstackController.getTests = (req, res) => {\n    const groupId = req.body.groupId;\n    const user = req.user;\n    if (user.permissions == 'teacher' || user.permissions == 'admin' || user.permissions == 'student') {\n        db.Stack.find({_group: groupId}).populate({\n            path: '',\n            select: 'name _group tasks results timeToDo'\n        }).then(stacks => {\n            res.status(200).json({stacks});\n        }).catch(err => {\n            res.status(500).json({err});\n        });\n    } else res.status(501).json({'error': 'No permissions for this action'});\n};\n\n// Get one exact stack\nstackController.getTest = (req, res) => {\n    const testId = req.body.testId;\n    const user = req.user;\n    if (user.permissions == 'teacher' || user.permissions == 'admin' || user.permissions == 'student') {\n        db.Stack.findById(testId).populate({path: '', select: 'name tasks results test timeToDo'}).then(stack => {\n            res.status(200).json({stack});\n        }).catch(err => {\n            res.status(500).json({err});\n        });\n    } else res.status(501).json({'error': 'No permissions for this action'});\n};\n\n// Add result to the stack\nstackController.addResult = (req, res) => {\n    const {\n        result,\n        stackId,\n        name,\n        username,\n        userId\n    } = req.body;\n\n    const user = req.user;\n\n    db.Stack.findById(stackId).populate({\n      path: '_group',\n      model: 'Group'\n    }).then(stack => {\n      const results = {\n          userId: user.id,\n          username,\n          name,\n          stack: {\n            name: stack.name,\n            id: stack._id\n          },\n          groupName: stack._group.name,\n          result\n      };\n      stack.results.push(results);\n      stack.save();\n      res.json({\n          success: true\n      });\n    }).catch(err => {\n        throw err;\n    });\n};\n\nstackController.updateResult = (req, res) => {\n    const {\n        result,\n        stackId,\n    } = req.body;\n\n    const user = req.user;\n\n    db.Stack.update({\n      _id: stackId,\n      results: { $elemMatch: { userId: user.id } }\n    }, {\n      $set: {\n        'results.$.result': result\n      }\n    }).then(success => res.json({ success: true }));\n};\n\nexport default stackController;\n"]}