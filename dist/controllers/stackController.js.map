{"version":3,"sources":["../../server/controllers/stackController.js"],"names":["stackController","locale","post","req","res","body","name","tasks","timeToDo","groupId","attempts","user","permissions","stack","Stack","_group","deadline","add","format","save","then","User","findById","id","console","log","userAccount","notification","type","authorId","_id","author","firstName","lastName","pic","picUrl","text","seen","date","subtract","update","_groups","$in","$push","notifications","multi","Group","populate","path","model","select","transporter","nodemailer","createTransport","service","secure","port","auth","pass","tls","rejectUnauthorized","maillist","group","_students","map","student","email","join","HelperOptions","from","to","subject","sendMail","error","info","json","success","catch","err","getTests","find","status","stacks","getTest","testId","addResult","result","stackId","username","userId","results","groupName","push","updateResult","$elemMatch","$set"],"mappings":"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","file":"stackController.js","sourcesContent":["import jwt from 'jsonwebtoken';\nimport randomize from 'randomatic';\nimport _ from 'lodash';\nimport moment from 'moment';\nimport secret from './../secret';\n\nimport db from './../models';\n\nimport helper from './helperFunctions';\n\nconst stackController = {};\n\nmoment.locale('ru');\n\n// New stack\nstackController.post = (req, res) => {\n    const {\n        name,\n        tasks,\n        timeToDo,\n        groupId,\n        attempts\n    } = req.body;\n\n    const user = req.user;\n\n    if(user.permissions == \"teacher\" || user.permissions == \"admin\") {\n        const stack = new db.Stack({\n            name,\n            tasks,\n            timeToDo,\n            _group: groupId,\n            attempts,\n            deadline: moment().add(timeToDo, 'days').format('LL')\n        });\n        stack.save().then(stack => {\n            db.User.findById(user.id).then(userAccount => {\n              console.log(userAccount);\n              console.log(user.id);\n              const notification = {\n                  type: 'newTask',\n                  authorId: userAccount._id,\n                  author: userAccount.firstName + \" \" + userAccount.lastName,\n                  pic: userAccount.picUrl,\n                  text: `${userAccount.firstName + \" \" + userAccount.lastName} создал новое задание.`,\n                  seen: false,\n                  date: moment().subtract(timeToDo, 'days').format('LL'),\n                  id: randomize('0A', 10)\n              };\n              db.User.update({ _groups: { $in: [groupId] }},\n                  { $push: { notifications: notification }}, {\n                    multi: true\n                  }).then(success => {\n                  db.Group.findById(stack._group).populate({\n                    path: '_students',\n                    model: 'User',\n                    select: 'email'\n                  }).then(group => {\n                    let transporter = nodemailer.createTransport({\n                      service: 'gmail',\n                      secure: false,\n                      port: 25,\n                      auth: {\n                        user: 'easylexlab@gmail.com',\n                        pass: '45aCRawa@hut'\n                      },\n                      tls: {\n                        rejectUnauthorized: false\n                      }\n                    });\n                    var maillist = group._students.map(student => student.email);\n                    maillist = maillist.join(', ');\n                    console.log(maillist);\n                    let HelperOptions = {\n                      from: `${userAccount.firstName + userAccount.lastName} <${userAccount.email}>`,\n                      to: maillist,\n                      subject: 'Новое задание',\n                      text: `${userAccount.firstName + userAccount.lastName} создал(а) новое задание. Срок выполнения: ${stack.timeToDo} дней.`\n                    };\n                    transporter.sendMail(HelperOptions, (error, info) => {\n                      if(error) {\n                        console.log(error);\n                      }\n                    });\n                  });\n                  return res.json({ success: true, stack });\n              }).catch(error => {\n                  throw error\n              });\n            })\n        }).catch(err => {\n            throw err\n        });\n    }\n};\n\n// Get stacks of one exact group\nstackController.getTests = (req, res) => {\n    const groupId = req.body.groupId;\n    const user = req.user;\n    if (user.permissions == 'teacher' || user.permissions == 'admin' || user.permissions == 'student') {\n        db.Stack.find({_group: groupId}).populate({\n            path: '',\n            select: 'name _group tasks results timeToDo'\n        }).then(stacks => {\n            res.status(200).json({stacks});\n        }).catch(err => {\n            res.status(500).json({err});\n        });\n    } else res.status(501).json({'error': 'No permissions for this action'});\n};\n\n// Get one exact stack\nstackController.getTest = (req, res) => {\n    const testId = req.body.testId;\n    const user = req.user;\n    if (user.permissions == 'teacher' || user.permissions == 'admin' || user.permissions == 'student') {\n        db.Stack.findById(testId).populate({path: '', select: 'name tasks results test timeToDo'}).then(stack => {\n            res.status(200).json({stack});\n        }).catch(err => {\n            res.status(500).json({err});\n        });\n    } else res.status(501).json({'error': 'No permissions for this action'});\n};\n\n// Add result to the stack\nstackController.addResult = (req, res) => {\n    const {\n        result,\n        stackId,\n        name,\n        username,\n        userId\n    } = req.body;\n\n    const user = req.user;\n\n    db.Stack.findById(stackId).populate({\n      path: '_group',\n      model: 'Group'\n    }).then(stack => {\n      const results = {\n          userId: user.id,\n          username,\n          name,\n          stack: {\n            name: stack.name,\n            id: stack._id\n          },\n          groupName: stack._group.name,\n          result\n      };\n      stack.results.push(results);\n      stack.save();\n      res.json({\n          success: true\n      });\n    }).catch(err => {\n        throw err;\n    });\n};\n\nstackController.updateResult = (req, res) => {\n    const {\n        result,\n        stackId,\n    } = req.body;\n\n    const user = req.user;\n\n    db.Stack.update({\n      _id: stackId,\n      results: { $elemMatch: { userId: user.id } }\n    }, {\n      $set: {\n        'results.$.result': result\n      }\n    }).then(success => res.json({ success: true }));\n};\n\nexport default stackController;\n"]}