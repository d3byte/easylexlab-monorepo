{"version":3,"sources":["../../server/controllers/stackController.js"],"names":["stackController","locale","post","req","res","body","name","tasks","timeToDo","groupId","attempts","user","permissions","stack","Stack","_group","deadline","add","format","save","then","User","findById","id","console","log","userAccount","notification","type","authorId","_id","author","firstName","lastName","pic","picUrl","text","seen","date","subtract","update","_groups","$in","$push","notifications","multi","Group","populate","path","model","select","transporter","createTransport","service","secure","port","auth","pass","tls","rejectUnauthorized","maillist","group","_students","map","student","email","join","HelperOptions","from","to","subject","sendMail","error","info","json","success","catch","err","getTests","find","status","stacks","getTest","testId","addResult","result","stackId","username","userId","results","groupName","push","updateResult","$elemMatch","$set","removeStack","findByIdAndRemove"],"mappings":"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","file":"stackController.js","sourcesContent":["import jwt from 'jsonwebtoken';\r\nimport randomize from 'randomatic';\r\nimport _ from 'lodash';\r\nimport moment from 'moment';\r\nimport secret from './../secret';\r\nimport nodemailer from 'nodemailer';\r\n\r\nimport db from './../models';\r\n\r\nimport helper from './helperFunctions';\r\n\r\nconst stackController = {};\r\n\r\nmoment.locale('ru');\r\n\r\n// New stack\r\nstackController.post = (req, res) => {\r\n    const {\r\n        name,\r\n        tasks,\r\n        timeToDo,\r\n        groupId,\r\n        attempts\r\n    } = req.body;\r\n\r\n    const user = req.user;\r\n\r\n    if(user.permissions == \"teacher\" || user.permissions == \"admin\") {\r\n        const stack = new db.Stack({\r\n            name,\r\n            tasks,\r\n            timeToDo,\r\n            _group: groupId,\r\n            attempts,\r\n            deadline: moment().add(timeToDo, 'days').format('LL')\r\n        });\r\n        stack.save().then(stack => {\r\n            db.User.findById(user.id).then(userAccount => {\r\n              console.log(userAccount);\r\n              console.log(user.id);\r\n              const notification = {\r\n                  type: 'newTask',\r\n                  authorId: userAccount._id,\r\n                  author: userAccount.firstName + \" \" + userAccount.lastName,\r\n                  pic: userAccount.picUrl,\r\n                  text: `${userAccount.firstName + \" \" + userAccount.lastName} создал новое задание.`,\r\n                  seen: false,\r\n                  date: moment().subtract(timeToDo, 'days').format('LL'),\r\n                  id: randomize('0A', 10)\r\n              };\r\n              db.User.update({ _groups: { $in: [groupId] }},\r\n                  { $push: { notifications: notification }}, {\r\n                    multi: true\r\n                  }).then(success => {\r\n                  db.Group.findById(stack._group).populate({\r\n                    path: '_students',\r\n                    model: 'User',\r\n                    select: 'email'\r\n                  }).then(group => {\r\n                    let transporter = nodemailer.createTransport({\r\n                      service: 'gmail',\r\n                      secure: false,\r\n                      port: 25,\r\n                      auth: {\r\n                        user: 'easylexlab@gmail.com',\r\n                        pass: '45aCRawa@hut'\r\n                      },\r\n                      tls: {\r\n                        rejectUnauthorized: false\r\n                      }\r\n                    });\r\n                    var maillist = group._students.map(student => student.email);\r\n                    maillist = maillist.join(', ');\r\n                    console.log(maillist);\r\n                    let HelperOptions = {\r\n                      from: `${userAccount.firstName + ' ' + userAccount.lastName} <${userAccount.email}>`,\r\n                      to: maillist,\r\n                      subject: 'Новое задание',\r\n                      text: `${userAccount.firstName + ' ' + userAccount.lastName} создал(а) новое задание. Срок выполнения: ${stack.timeToDo} дней.`\r\n                    };\r\n                    transporter.sendMail(HelperOptions, (error, info) => {\r\n                      if(error) {\r\n                        console.log(error);\r\n                      }\r\n                    });\r\n                  });\r\n                  return res.json({ success: true, stack });\r\n              }).catch(error => {\r\n                  throw error\r\n              });\r\n            })\r\n        }).catch(err => {\r\n            throw err\r\n        });\r\n    }\r\n};\r\n\r\n// Get stacks of one exact group\r\nstackController.getTests = (req, res) => {\r\n    const groupId = req.body.groupId;\r\n    const user = req.user;\r\n    if (user.permissions == 'teacher' || user.permissions == 'admin' || user.permissions == 'student') {\r\n        db.Stack.find({_group: groupId}).populate({\r\n            path: '',\r\n            select: 'name _group tasks results timeToDo'\r\n        }).then(stacks => {\r\n            res.status(200).json({stacks});\r\n        }).catch(err => {\r\n            res.status(500).json({err});\r\n        });\r\n    } else res.status(501).json({'error': 'No permissions for this action'});\r\n};\r\n\r\n// Get one exact stack\r\nstackController.getTest = (req, res) => {\r\n    const testId = req.body.testId;\r\n    const user = req.user;\r\n    if (user.permissions == 'teacher' || user.permissions == 'admin' || user.permissions == 'student') {\r\n        db.Stack.findById(testId).populate({path: '', select: 'name tasks results test timeToDo'}).then(stack => {\r\n            res.status(200).json({stack});\r\n        }).catch(err => {\r\n            res.status(500).json({err});\r\n        });\r\n    } else res.status(501).json({'error': 'No permissions for this action'});\r\n};\r\n\r\n// Add result to the stack\r\nstackController.addResult = (req, res) => {\r\n    const {\r\n        result,\r\n        stackId,\r\n        name,\r\n        username,\r\n        userId\r\n    } = req.body;\r\n\r\n    const user = req.user;\r\n\r\n    db.Stack.findById(stackId).populate({\r\n      path: '_group',\r\n      model: 'Group'\r\n    }).then(stack => {\r\n      const results = {\r\n          userId: user.id,\r\n          username,\r\n          name,\r\n          stack: {\r\n            name: stack.name,\r\n            id: stack._id\r\n          },\r\n          groupName: stack._group.name,\r\n          result\r\n      };\r\n      stack.results.push(results);\r\n      stack.save();\r\n      res.json({\r\n          success: true\r\n      });\r\n    }).catch(err => {\r\n        throw err;\r\n    });\r\n};\r\n\r\nstackController.updateResult = (req, res) => {\r\n    const {\r\n        result,\r\n        stackId,\r\n    } = req.body;\r\n\r\n    const user = req.user;\r\n\r\n    db.Stack.update({\r\n      _id: stackId,\r\n      results: { $elemMatch: { userId: user.id } }\r\n    }, {\r\n      $set: {\r\n        'results.$.result': result\r\n      }\r\n    }).then(success => res.json({ success: true }));\r\n};\r\n\r\nstackController.removeStack = (req, res) => {\r\n  const user = req.user;\r\n  const stackId = req.body.stackId;\r\n\r\n  if (user.permissions == 'teacher' || user.permissions == 'admin') {\r\n    db.Stack.findByIdAndRemove(stackId).then(success => {\r\n      return res.json({ success: true });\r\n    });\r\n  }\r\n};\r\n\r\nexport default stackController;\r\n"]}