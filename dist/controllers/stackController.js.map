{"version":3,"sources":["../../server/controllers/stackController.js"],"names":["stackController","post","req","res","body","name","tasks","timeToDo","groupId","attempts","user","permissions","stack","Stack","_group","console","log","save","then","status","json","success","catch","err","getTests","find","populate","path","select","stacks","getTest","testId","findById","addResult","result","stackId","username","userId","results","id","push"],"mappings":";;;;;;AAAA;;;;AACA;;;;AAEA;;;;AAEA;;;;;;AAEA,IAAMA,kBAAkB,EAAxB;;AAEA;AACAA,gBAAgBC,IAAhB,GAAuB,UAACC,GAAD,EAAMC,GAAN,EAAc;AAAA,kBAO/BD,IAAIE,IAP2B;AAAA,MAEjCC,IAFiC,aAEjCA,IAFiC;AAAA,MAGjCC,KAHiC,aAGjCA,KAHiC;AAAA,MAIjCC,QAJiC,aAIjCA,QAJiC;AAAA,MAKjCC,OALiC,aAKjCA,OALiC;AAAA,MAMjCC,QANiC,aAMjCA,QANiC;;AASnC;;AAEA,MAAMC,OAAOR,IAAIQ,IAAjB;;AAEA,MAAGA,KAAKC,WAAL,IAAoB,SAApB,IAAiCD,KAAKC,WAAL,IAAoB,OAAxD,EAAiE;AAC7D,QAAMC,QAAQ,IAAI,iBAAGC,KAAP,CAAa;AACzBR,gBADyB;AAEzBC,kBAFyB;AAGzBC,wBAHyB;AAIzBO,cAAQN,OAJiB;AAKzBC;AALyB,KAAb,CAAd;AAOAM,YAAQC,GAAR,CAAYJ,KAAZ;AACAA,UAAMK,IAAN,GAAaC,IAAb,CAAkB,iBAAS;AACzBf,UAAIgB,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB;AACnBC,iBAAS,IADU;AAEnBT;AAFmB,OAArB;AAID,KALD,EAKGU,KALH,CAKS,eAAO;AACdnB,UAAIgB,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,EAACG,KAAK,KAAN,EAArB;AACD,KAPD;AAQD;AACJ,CA/BD;;AAiCA;AACAvB,gBAAgBwB,QAAhB,GAA2B,UAACtB,GAAD,EAAMC,GAAN,EAAc;AACvC,MAAMK,UAAUN,IAAIE,IAAJ,CAASI,OAAzB;AACA,MAAME,OAAOR,IAAIQ,IAAjB;AACA,MAAGA,KAAKC,WAAL,IAAoB,SAApB,IAAiCD,KAAKC,WAAL,IAAoB,OAArD,IAAgED,KAAKC,WAAL,IAAoB,SAAvF,EAAkG;AAChG,qBAAGE,KAAH,CAASY,IAAT,CAAc,EAACX,QAAQN,OAAT,EAAd,EAAiCkB,QAAjC,CAA0C,EAAEC,MAAM,EAAR,EAAYC,QAAQ,oCAApB,EAA1C,EAAsGV,IAAtG,CAA2G,kBAAU;AACnHf,UAAIgB,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,EAAES,cAAF,EAArB;AACD,KAFD,EAEGP,KAFH,CAES,eAAO;AACdnB,UAAIgB,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,EAAEG,QAAF,EAArB;AACD,KAJD;AAKD,GAND,MAMOpB,IAAIgB,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,EAAC,SAAQ,gCAAT,EAArB;AACR,CAVD;;AAYA;AACApB,gBAAgB8B,OAAhB,GAA0B,UAAC5B,GAAD,EAAMC,GAAN,EAAc;AACtC,MAAM4B,SAAS7B,IAAIE,IAAJ,CAAS2B,MAAxB;AACA,MAAMrB,OAAOR,IAAIQ,IAAjB;AACA,MAAGA,KAAKC,WAAL,IAAoB,SAApB,IAAiCD,KAAKC,WAAL,IAAoB,OAArD,IAAgED,KAAKC,WAAL,IAAoB,SAAvF,EAAkG;AAChG,qBAAGE,KAAH,CAASmB,QAAT,CAAkBD,MAAlB,EAA0BL,QAA1B,CAAmC,EAAEC,MAAM,EAAR,EAAYC,QAAQ,kCAApB,EAAnC,EAA6FV,IAA7F,CAAkG,iBAAS;AACzGf,UAAIgB,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,EAAER,YAAF,EAArB;AACD,KAFD,EAEGU,KAFH,CAES,eAAO;AACdnB,UAAIgB,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,EAAEG,QAAF,EAArB;AACD,KAJD;AAKD,GAND,MAMOpB,IAAIgB,MAAJ,CAAW,GAAX,EAAgBC,IAAhB,CAAqB,EAAC,SAAQ,gCAAT,EAArB;AACR,CAVD;;AAYA;AACApB,gBAAgBiC,SAAhB,GAA4B,UAAC/B,GAAD,EAAMC,GAAN,EAAc;AAAA,mBAOpCD,IAAIE,IAPgC;AAAA,MAEtC8B,MAFsC,cAEtCA,MAFsC;AAAA,MAGtCC,OAHsC,cAGtCA,OAHsC;AAAA,MAItC9B,IAJsC,cAItCA,IAJsC;AAAA,MAKtC+B,QALsC,cAKtCA,QALsC;AAAA,MAMtCC,MANsC,cAMtCA,MANsC;;;AASxC,MAAM3B,OAAOR,IAAIQ,IAAjB;;AAEA,MAAM4B,UAAU;AACdD,YAAQ3B,KAAK6B,EADC;AAEdH,sBAFc;AAGd/B,cAHc;AAId6B;AAJc,GAAhB;;AAOA,mBAAGrB,KAAH,CAASmB,QAAT,CAAkBG,OAAlB,EAA2BjB,IAA3B,CAAgC,iBAAS;AACvCN,UAAM0B,OAAN,CAAcE,IAAd,CAAmBF,OAAnB;AACA1B,UAAMK,IAAN;AACAd,QAAIiB,IAAJ,CAAS;AACPC,eAAS;AADF,KAAT;AAGD,GAND,EAMGC,KANH,CAMS,eAAO;AACd,UAAMC,GAAN;AACD,GARD;AASD,CA3BD;;kBA6BevB,e","file":"stackController.js","sourcesContent":["import jwt from 'jsonwebtoken';\nimport secret from './../secret';\n\nimport db from './../models';\n\nimport helper from './helperFunctions';\n\nconst stackController = {};\n\n// New stack\nstackController.post = (req, res) => {\n  const {\n    name,\n    tasks,\n    timeToDo,\n    groupId,\n    attempts\n  } = req.body;\n\n  // TODO: use lodash to refactor the code\n\n  const user = req.user;\n\n  if(user.permissions == \"teacher\" || user.permissions == \"admin\") {\n      const stack = new db.Stack({\n        name,\n        tasks,\n        timeToDo,\n        _group: groupId,\n        attempts\n      });\n      console.log(stack);\n      stack.save().then(stack => {\n        res.status(200).json({\n          success: true,\n          stack\n        });\n      }).catch(err => {\n        res.status(500).json({err: 'lel'});\n      });\n    }\n};\n\n// Get stacks of one exact group\nstackController.getTests = (req, res) => {\n  const groupId = req.body.groupId;\n  const user = req.user;\n  if(user.permissions == 'teacher' || user.permissions == 'admin' || user.permissions == 'student') {\n    db.Stack.find({_group: groupId}).populate({ path: '', select: 'name _group tasks results timeToDo' }).then(stacks => {\n      res.status(200).json({ stacks });\n    }).catch(err => {\n      res.status(500).json({ err });\n    });\n  } else res.status(501).json({'error':'No permissions for this action'});\n};\n\n// Get one exact stack\nstackController.getTest = (req, res) => {\n  const testId = req.body.testId;\n  const user = req.user;\n  if(user.permissions == 'teacher' || user.permissions == 'admin' || user.permissions == 'student') {\n    db.Stack.findById(testId).populate({ path: '', select: 'name tasks results test timeToDo' }).then(stack => {\n      res.status(200).json({ stack });\n    }).catch(err => {\n      res.status(500).json({ err });\n    });\n  } else res.status(501).json({'error':'No permissions for this action'});\n};\n\n// Add result to the stack\nstackController.addResult = (req, res) => {\n  const {\n    result,\n    stackId,\n    name,\n    username,\n    userId\n  } = req.body;\n\n  const user = req.user;\n\n  const results = {\n    userId: user.id,\n    username,\n    name,\n    result\n  };\n\n  db.Stack.findById(stackId).then(stack => {\n    stack.results.push(results);\n    stack.save();\n    res.json({\n      success: true\n    });\n  }).catch(err => {\n    throw err;\n  });\n};\n\nexport default stackController;\n"]}