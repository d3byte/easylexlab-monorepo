{"version":3,"sources":["../../server/controllers/stackController.js"],"names":["stackController","post","req","res","body","name","tasks","timeToDo","groupId","attempts","user","permissions","stack","Stack","_group","save","then","status","json","success","catch","err","getTests","find","populate","path","select","stacks","getTest","testId","findById","addResult","result","stackId","username","userId","results","id","push"],"mappings":"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","file":"stackController.js","sourcesContent":["import jwt from 'jsonwebtoken';\nimport _ from 'lodash';\nimport secret from './../secret';\n\nimport db from './../models';\n\nimport helper from './helperFunctions';\n\nconst stackController = {};\n\n// New stack\nstackController.post = (req, res) => {\n    const {\n        name,\n        tasks,\n        timeToDo,\n        groupId,\n        attempts\n    } = req.body;\n\n    // TODO: use lodash to refactor the code\n\n    const user = req.user;\n\n    if(user.permissions == \"teacher\" || user.permissions == \"admin\") {\n        const stack = new db.Stack({\n            name,\n            tasks,\n            timeToDo,\n            _group: groupId,\n            attempts\n        });\n        stack.save().then(stack => {\n            res.status(200).json({\n                success: true,\n                stack\n            });\n        }).catch(err => {\n            res.status(500).json({err: 'error'});\n        });\n    }\n};\n\n// Get stacks of one exact group\nstackController.getTests = (req, res) => {\n    const groupId = req.body.groupId;\n    const user = req.user;\n    if (user.permissions == 'teacher' || user.permissions == 'admin' || user.permissions == 'student') {\n        db.Stack.find({_group: groupId}).populate({\n            path: '',\n            select: 'name _group tasks results timeToDo'\n        }).then(stacks => {\n            res.status(200).json({stacks});\n        }).catch(err => {\n            res.status(500).json({err});\n        });\n    } else res.status(501).json({'error': 'No permissions for this action'});\n};\n\n// Get one exact stack\nstackController.getTest = (req, res) => {\n    const testId = req.body.testId;\n    const user = req.user;\n    if (user.permissions == 'teacher' || user.permissions == 'admin' || user.permissions == 'student') {\n        db.Stack.findById(testId).populate({path: '', select: 'name tasks results test timeToDo'}).then(stack => {\n            res.status(200).json({stack});\n        }).catch(err => {\n            res.status(500).json({err});\n        });\n    } else res.status(501).json({'error': 'No permissions for this action'});\n};\n\n// Add result to the stack\nstackController.addResult = (req, res) => {\n    const {\n        result,\n        stackId,\n        name,\n        username,\n        userId\n    } = req.body;\n\n    const user = req.user;\n\n    const results = {\n        userId: user.id,\n        username,\n        name,\n        result\n    };\n\n    db.Stack.findById(stackId).then(stack => {\n        stack.results.push(results);\n        stack.save();\n        res.json({\n            success: true\n        });\n    }).catch(err => {\n        throw err;\n    });\n};\n\nexport default stackController;\n"]}